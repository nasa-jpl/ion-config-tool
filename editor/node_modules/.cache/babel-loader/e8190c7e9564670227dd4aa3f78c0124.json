{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nexport default function register(){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nconsole.log('New content is available; please refresh.');}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});});}}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"names":["register","process","env","NODE_ENV","navigator","window","addEventListener","swUrl","PUBLIC_URL","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","unregister","ready"],"sources":["/Users/rlborgen/git/ionconfig/editor/src/registerServiceWorker.js"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,cAAe,SAASA,SAAT,EAAoB,CACjC,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,EAAyC,iBAAmBC,UAAhE,CAA2E,CACzEC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,CAAgC,UAAM,CACpC,GAAMC,MAAK,WAAMN,OAAO,CAACC,GAAR,CAAYM,UAAlB,sBAAX,CACAJ,SAAS,CAACK,aAAV,CACGT,QADH,CACYO,KADZ,EAEGG,IAFH,CAEQ,SAAAC,YAAY,CAAI,CACpBA,YAAY,CAACC,aAAb,CAA6B,UAAM,CACjC,GAAMC,iBAAgB,CAAGF,YAAY,CAACG,UAAtC,CACAD,gBAAgB,CAACE,aAAjB,CAAiC,UAAM,CACrC,GAAIF,gBAAgB,CAACG,KAAjB,GAA2B,WAA/B,CAA4C,CAC1C,GAAIZ,SAAS,CAACK,aAAV,CAAwBQ,UAA5B,CAAwC,CACtC;AACA;AACA;AACA;AACAC,OAAO,CAACC,GAAR,CAAY,2CAAZ,EACD,CAND,IAMO,CACL;AACA;AACA;AACAD,OAAO,CAACC,GAAR,CAAY,oCAAZ,EACD,CACF,CACF,CAfD,CAgBD,CAlBD,CAmBD,CAtBH,EAuBGC,KAvBH,CAuBS,SAAAC,KAAK,CAAI,CACdH,OAAO,CAACG,KAAR,CAAc,2CAAd,CAA2DA,KAA3D,EACD,CAzBH,EA0BD,CA5BD,EA6BD,CACF,CAED,MAAO,SAASC,WAAT,EAAsB,CAC3B,GAAI,iBAAmBlB,UAAvB,CAAkC,CAChCA,SAAS,CAACK,aAAV,CAAwBc,KAAxB,CAA8Bb,IAA9B,CAAmC,SAAAC,YAAY,CAAI,CACjDA,YAAY,CAACW,UAAb,GACD,CAFD,EAGD,CACF"},"metadata":{},"sourceType":"module"}