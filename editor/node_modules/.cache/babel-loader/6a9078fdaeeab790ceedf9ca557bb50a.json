{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\n\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\n\n\nvar updateDepth = 0;\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\n\nvar updateQueue = [];\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\n\nvar markupQueue = [];\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\n\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\n\n\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\n\n\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\n\n\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\n\n\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\n\n\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\n\n\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\n\n\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function mountChildren(nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name]; // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function updateTextContent(nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n        ReactChildReconciler.unmountChildren(prevChildren); // TODO: The setTextContent operation should be enough\n\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        } // Set new text content.\n\n\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function updateMarkup(nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n        ReactChildReconciler.unmountChildren(prevChildren);\n\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n\n      this._renderedChildren = nextChildren;\n\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n\n      var name; // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n\n      var lastIndex = 0;\n      var nextIndex = 0;\n\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n\n            this._unmountChild(prevChild);\n          } // The child must be instantiated before it's mounted.\n\n\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n\n        nextIndex++;\n      } // Remove children that are no longer present.\n\n\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function unmountChildren() {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function moveChild(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function createChild(child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function removeChild(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function setTextContent(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function setMarkup(markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function _mountChildByNameAtIndex(child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function _unmountChild(child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"names":["ReactComponentEnvironment","require","ReactMultiChildUpdateTypes","ReactCurrentOwner","ReactReconciler","ReactChildReconciler","flattenChildren","updateDepth","updateQueue","markupQueue","enqueueInsertMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","content","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueSetMarkup","SET_MARKUP","enqueueTextContent","textContent","TEXT_CONTENT","processQueue","length","processChildrenUpdates","clearQueue","ReactMultiChild","Mixin","_reconcilerInstantiateChildren","nestedChildren","transaction","context","process","env","NODE_ENV","_currentElement","current","_owner","instantiateChildren","_reconcilerUpdateChildren","prevChildren","nextNestedChildrenElements","nextChildren","updateChildren","mountChildren","children","_renderedChildren","mountImages","index","name","hasOwnProperty","child","rootID","_rootNodeID","mountImage","mountComponent","_mountIndex","updateTextContent","nextContent","errorThrown","unmountChildren","_unmountChild","setTextContent","updateMarkup","nextMarkup","_unmountChildByName","setMarkup","_updateChildren","lastIndex","nextIndex","prevChild","nextChild","moveChild","Math","max","_mountChildByNameAtIndex","renderedChildren","createChild","removeChild","module","exports"],"sources":["/Users/rlborgen/git/ionconfig/editor/node_modules/react-popout/node_modules/react/lib/ReactMultiChild.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;"],"mappings":"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"},"metadata":{},"sourceType":"script"}