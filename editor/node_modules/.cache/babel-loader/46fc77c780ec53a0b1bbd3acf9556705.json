{"ast":null,"code":"import _classCallCheck from\"/Users/rlborgen/git/ionconfig/editor/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/rlborgen/git/ionconfig/editor/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/rlborgen/git/ionconfig/editor/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/rlborgen/git/ionconfig/editor/node_modules/@babel/runtime/helpers/esm/createSuper.js\";//        App.jsx     Main App JSX for IonConfig Tool\n//\n//        Copyright (c) 2018, California Institute of Technology.\n//        ALL RIGHTS RESERVED.  U.S. Government Sponsorship\n//        acknowledged.\n//                                                                   \n//      Author: Rick Borgen, Jet Propulsion Laboratory         \n//                                                               \nimport React from'react';// custom component imports\nimport IonModelLoader from'./IonModelLoader.jsx';import NetModelLoader from'./NetModelLoader.jsx';import IonModel from'./IonModel.jsx';import NetModel from'./NetModel.jsx';// 3rd-party component imports\nimport{Navbar}from'react-bootstrap';import{FormControl}from'react-bootstrap';import{Button,ButtonToolbar}from'react-bootstrap';import{Grid,Row,Col}from'react-bootstrap';import{Glyphicon}from'react-bootstrap';import\"date-format-lite\";// schema imports\nimport configTypes from'./configTypes.json';import cmdTypes from'./cmdTypes.json';import paramTypes from'./paramTypes.json';import selections from'./selections.json';// non-render state\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var uniqId=0;// counter used to make unique names\nvar App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.handleNewNet=function(e){var val=e.target.value;console.log(\"a new network model name! \"+val);var newState=Object.assign({},_this.state);newState.newNetModelName=val;_this.setState(newState);e.preventDefault();};_this.submitNewNet=function(){console.log(\"a new network model tran submitted!\");var val=_this.state.newNetModelName;var netObj={\"name\":val,\"desc\":\"\"};var tran={action:\"NEW-NET-MODEL\",netModel:netObj};_this.dispatch(tran);_this.setState({makeNewNetModel:false});};_this.handleNewIon=function(e){var val=e.target.value;console.log(\"a new ion model name! \"+val);var newState=Object.assign({},_this.state);newState.newIonModelName=val;_this.setState(newState);e.preventDefault();};_this.submitNewIon=function(){console.log(\"a new ion model tran submitted!\");var val=_this.state.newIonModelName;var ionObj={\"name\":val,\"desc\":\"\",\"nextNodeNum\":1};var tran={action:\"NEW-ION-MODEL\",ionModel:ionObj};_this.dispatch(tran);_this.setState({makeNewIonModel:false});};console.log(\"App ctor\");var myConfigs=JSON.stringify(configTypes);console.log('configTypes:'+myConfigs);var myCmds=JSON.stringify(cmdTypes);console.log('cmdTypes:'+myCmds);var myParams=JSON.stringify(paramTypes);console.log('paramTypes:'+myParams);var mySelect=JSON.stringify(selections);console.log('selections:'+mySelect);var cloneValues={};// future state objects based on network model\nvar netNodes={};var netHosts={};var netHops={};var netAddrs=[];// future state objects based on ion model\nvar graphs={};var nodes={};var configs={};var commands={};var hosts={};var ipaddrs={};// catch errors and alert\nwindow.onerror=function(msg,url,lineno){alert('Error message: '+msg+'\\nURL: '+url+'\\nLine Number: '+lineno);return true;};// assign cmdTypes list to each configType\nfor(var cmdType in cmdTypes){var confType=cmdTypes[cmdType].configType;configTypes[confType].cmdTypes.push(cmdType);var isCloned=cmdTypes[cmdType].isCloned;if(isCloned)console.log(\"*** cmdType: \"+cmdType+\" has a cloned property.\");}console.log(\"=== cmdTypes now mapped into configTypes.\");for(var conType in configTypes){console.log(\"configType: \"+conType+\" has: \"+JSON.stringify(configTypes[conType].cmdTypes));}// assign paramTypes list to each cmdType\nfor(var pType in paramTypes){console.log(\"ingest paramType: \"+pType);var cType=paramTypes[pType].cmdType;cmdTypes[cType].paramTypes.push(pType);}console.log(\"=== paramTypes now mapped into cmdTypes.\");for(var cmType in cmdTypes){console.log(\"cmdType: \"+cmType+\" has: \"+JSON.stringify(cmdTypes[cmType].paramTypes));}// the master state atom\n_this.state={loadIonModel:false,makeNewIonModel:false,ionModelActive:false,makeNewModelName:\"\",loadNetModel:false,makeNewNetModel:false,newNetModel:false,netModelActive:false,newNetModelName:\"\",netModel:null,// netModel object\nnetNodes:netNodes,// net model nodes\nnetHosts:netHosts,// net model hosts\nnetHops:netHops,// net model hops\nnetAddrs:netAddrs,// net model ip addrs\nionModel:null,// ionModel object\nhosts:hosts,// model\nipaddrs:ipaddrs,// model\ngraphs:graphs,// model\nnodes:nodes,// model\nconfigs:configs,// model\ncommands:commands,// model\ncloneValues:cloneValues// derived\n};return _this;}_createClass(App,[{key:\"getUniqId\",value:// generate next uniq id...used by all types\nfunction getUniqId(){var nextId=uniqId+1;uniqId=nextId;return nextId;}// get Ion Model handle\n},{key:\"getIonModel\",value:function getIonModel(){return this.state.ionModel;}// fetch the owning nodeKey of a command\n},{key:\"getNodeKey\",value:function getNodeKey(cmdKey){var cmd=this.state.commands[cmdKey];var configKey=cmd.configKey;var config=this.state.configs[configKey];var nodeKey=config.nodeKey;return nodeKey;}// fetch values for a cmdKey\n},{key:\"getValues\",value:function getValues(cmdKey){//console.log(\"===getValues for cmd: \" + cmdKey);\nvar cmds=this.state.commands;var cmd=cmds[cmdKey];return cmd.values;}// fetch the cmdType object based on a command\n},{key:\"getCmdType\",value:function getCmdType(cmdKey){var cmd=this.state.commands[cmdKey];var cmdTypeKey=cmd.typeKey;var cmdType=cmdTypes[cmdTypeKey];return cmdType;}// check if a new name is valid\n},{key:\"isGoodName\",value:function isGoodName(name){console.log(\"isGoodName ?? \"+name);if(name==='')return false;if(name.indexOf(' ')>=0)return false;return true;}// check if a new node name is valid\n},{key:\"isGoodNodeKey\",value:function isGoodNodeKey(newNodeKey){console.log(\"isGoodNodeKey ?? \"+newNodeKey);for(var nodeKey in this.state.nodes){if(nodeKey===newNodeKey)return false;}return true;}// check if a new node name is valid\n},{key:\"isGoodNetNodeKey\",value:function isGoodNetNodeKey(newNodeKey){console.log(\"isGoodNetNodeKey ?? \"+newNodeKey);for(var nodeKey in this.state.netNodes){if(nodeKey===newNodeKey)return false;}return true;}// check if a new net host name is valid\n},{key:\"isGoodNetHostKey\",value:function isGoodNetHostKey(newHostKey){console.log(\"isGoodNetHostKey ?? \"+newHostKey);for(var hostKey in this.state.netHosts){if(hostKey===newHostKey)return false;}return true;}// check if a new net hop name is valid\n},{key:\"isGoodNetHopKey\",value:function isGoodNetHopKey(newHopKey){console.log(\"isGoodNetHopKey ?? \"+newHopKey);for(var hopKey in this.state.netHops){if(hopKey===newHopKey)return false;}return true;}// check if a new nodeNum is valid\n},{key:\"isGoodNodeNum\",value:function isGoodNodeNum(myNodeKey,nodeNum){console.log(\"isGoodNodeNum ?? \"+myNodeKey+' '+nodeNum);for(var nodeKey in this.state.nodes){//console.log(\"checking node: \" + nodeKey);\nif(Number(nodeNum)===Number(this.state.nodes[nodeKey].ionNodeNum)&&myNodeKey!==nodeKey)return false;}return true;}//check if protocol has a standard ION CLI\n},{key:\"isStandardProtocol\",value:function isStandardProtocol(protocol){if(protocol===\"tcp\"||protocol===\"stcp\"||protocol===\"udp\"||protocol===\"dccp\"||protocol===\"bssp\"||protocol===\"ltp\")return true;else return false;}// check if a candidate nodeKey exists\n},{key:\"usedNodeKey\",value:function usedNodeKey(myNodeKey){console.log(\"usedNodeKey ?? \"+myNodeKey);if(this.state.nodes.hasOwnProperty(myNodeKey))return true;return false;}// make a clone-able value object (or expression) based on special command types\n},{key:\"makeCloneVal\",value:function makeCloneVal(nodeKey,cmd){var cloneVal={};// first assign properties not dependent on type\ncloneVal[\"id\"]=cmd.id;cloneVal[\"nodeKey\"]=nodeKey;cloneVal[\"clones\"]=[];// a list for clone id objects (cmdKey & valIdx)\ncloneVal[\"value\"]=this.makeComboValue(cmd,cmd.typeKey);// then check specific type for other init rules\nif(cmd.typeKey===\"node_nodenum\"){/// special model command (not ion)\ncloneVal[\"type\"]=\"nodeNum\";cloneVal[\"label\"]=nodeKey;}else if(cmd.typeKey===\"node_nodekey\"){/// special model command (not ion)\ncloneVal[\"type\"]=\"nodeKey\";cloneVal[\"label\"]=nodeKey;}else if(cmd.typeKey===\"host_hostkey\"){/// special model command (not ion)\ncloneVal[\"type\"]=\"hostKey\";cloneVal[\"label\"]='Host:'+cmd.values[0];}else if(cmd.typeKey===\"host_ipaddr\"){/// special model command (not ion)\ncloneVal[\"type\"]=\"ipAddr\";cloneVal[\"label\"]='Host: '+nodeKey+' IpAddr:'+cmd.values[0];}else if(cmd.typeKey===\"bpv6rc_endpoint\"||cmd.typeKey===\"bpv7rc_endpoint\"){cloneVal[\"type\"]=\"ionEndpoint\";// should annotate endpoint purpose in the the label\nvar suffix='';if(cmd.values[3]!==\"\")suffix=' ['+cmd.values[3]+']';cloneVal[\"label\"]='node:'+nodeKey+' servNum:'+cmd.values[1]+suffix;}else if(cmd.typeKey===\"bpv6rc_induct_ltp\"||cmd.typeKey===\"bpv7rc_induct_ltp\"){cloneVal[\"type\"]=\"ltpInduct\";cloneVal[\"label\"]='toNode: '+nodeKey+' ltpInductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_induct_udp\"||cmd.typeKey===\"bpv7rc_induct_udp\"){cloneVal[\"type\"]=\"udpInduct\";cloneVal[\"label\"]='toNode: '+nodeKey+' udpInductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_induct_stcp\"||cmd.typeKey===\"bpv7rc_induct_stcp\"){cloneVal[\"type\"]=\"stcpInduct\";cloneVal[\"label\"]='toNode:'+nodeKey+' stcpInductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_induct_tcp\"||cmd.typeKey===\"bpv7rc_induct_tcp\"){cloneVal[\"type\"]=\"tcpInduct\";cloneVal[\"label\"]='toNode: '+nodeKey+' tcpInductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_induct_dccp\"||cmd.typeKey===\"bpv7rc_induct_dccp\"){cloneVal[\"type\"]=\"dccpInduct\";cloneVal[\"label\"]='toNode: '+nodeKey+' dccpInductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_induct_bssp\"||cmd.typeKey===\"bpv7rc_induct_bssp\"){cloneVal[\"type\"]=\"bsspInduct\";cloneVal[\"label\"]='toNode: '+nodeKey+' bsspInductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_outduct_ltp\"||cmd.typeKey===\"bpv7rc_outduct_ltp\"){cloneVal[\"type\"]=\"ltpOutduct\";cloneVal[\"label\"]='fromNode: '+nodeKey+' ltpOutductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_outduct_udp\"||cmd.typeKey===\"bpv7rc_outduct_udp\"){cloneVal[\"type\"]=\"udpOutduct\";cloneVal[\"label\"]='fromNode: '+nodeKey+' udpOutductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_outduct_stcp\"||cmd.typeKey===\"bpv7rc_outduct_stcp\"){cloneVal[\"type\"]=\"stcpOutduct\";cloneVal[\"label\"]='fromNode:'+nodeKey+' stcpOutductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_outduct_tcp\"||cmd.typeKey===\"bpv7rc_outduct_tcp\"){cloneVal[\"type\"]=\"tcpOutduct\";cloneVal[\"label\"]='fromNode: '+nodeKey+' tcpOutductName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_outduct_dccp\"||cmd.typeKey===\"bpv7rc_outduct_dccp\"){cloneVal[\"type\"]=\"dccpOutduct\";cloneVal[\"label\"]='fromNode: '+nodeKey+' dccpOutductName: '+cloneVal.value;}else if(cmd.typeKey===\"ltprc_start_udp\"){cloneVal[\"type\"]=\"udpLink\";cloneVal[\"label\"]='toNode: '+nodeKey+' udpLinkName: '+cloneVal.value;}else if(cmd.typeKey===\"ltprc_start_dccp\"){cloneVal[\"type\"]=\"dccpLink\";cloneVal[\"label\"]='toNode: '+nodeKey+' dccpLinkName: '+cloneVal.value;}else if(cmd.typeKey===\"bpv6rc_outduct_bssp\"||cmd.typeKey===\"bpv7rc_outduct_bssp\"){cloneVal[\"type\"]=\"bsspOutduct\";cloneVal[\"label\"]='fromNode: '+nodeKey+' bsspOutductName: '+cloneVal.value;}else{console.log(\"!!! nodeKey: \"+nodeKey+\" is not clone type!! \");return null;}console.log(\"$$$ new cloneVal = \"+JSON.stringify(cloneVal));return cloneVal;}// make a combined value used for cloning (duct names, endpoints, etc.)\n},{key:\"makeComboValue\",value:function makeComboValue(cmd,type){console.log(\"$$$ makeComboVal = \"+type+' '+cmd.values[0]);var combo=\"\";if(type===\"node_nodenum\")combo=cmd.values[0];else if(type===\"node_nodekey\")combo=cmd.values[0];else if(type===\"host_hostkey\")combo=cmd.values[0];else if(type===\"host_ipaddr\")combo=cmd.values[0];else if(type===\"bpv6rc_endpoint\"||type===\"bpv7rc_endpoint\")combo=\"ipn:\"+cmd.values[0]+'.'+cmd.values[1];else if(type===\"bpv6rc_induct_ltp\"||type===\"bpv6rc_induct_bssp\"||type===\"bpv7rc_induct_ltp\"||type===\"bpv7rc_induct_bssp\")combo=cmd.values[0];else if(type===\"bpv6rc_induct_udp\"||type===\"bpv6rc_induct_stcp\"||type===\"bpv6rc_induct_tcp\"||type===\"bpv6rc_induct_dccp\"||type===\"bpv7rc_induct_tcp\"||type===\"bpv7rc_induct_stcp\"||type===\"bpv7rc_induct_tcp\"||type===\"bpv7rc_induct_dccp\")combo=cmd.values[0]+':'+cmd.values[1];else if(type===\"bpv6rc_outduct_ltp\"||type===\"bpv6rc_outduct_bssp\"||type===\"bpv7rc_outduct_ltp\"||type===\"bpv7rc_outduct_bssp\")combo=cmd.values[0];else if(type===\"bpv6rc_outduct_stcp\"||type===\"bpv6rc_outduct_tcp\"||type===\"bpv6rc_outduct_dccp\"||type===\"bpv6rc_outduct_udp\"||type===\"bpv7rc_outduct_stcp\"||type===\"bpv7rc_outduct_tcp\"||type===\"bpv7rc_outduct_dccp\"||type===\"bpv7rc_outduct_udp\")combo=cmd.values[0];else if(type===\"ltprc_start_udp\"||type===\"ltprc_start_dccp\")combo=cmd.values[0]+':'+cmd.values[1];return combo;}// find a cloneValue based on type & value\n},{key:\"findCloneVal\",value:function findCloneVal(cloneVals,type,value){if(value==='??')// just a fake default value\nreturn null;var target=String(value);// force string compare, avoid num issues\nfor(var key in cloneVals){var cloneVal=cloneVals[key];//console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\nif(cloneVal.type===type&&String(cloneVal.value)===target)return cloneVal;}console.log(\"!!! failed to find cloneVal for type: \"+type+\"  value: \"+value);return null;}// find any cloneValue based on type (defaults for new commands)\n},{key:\"getAnyCloneVal\",value:function getAnyCloneVal(cloneVals,type){for(var key in cloneVals){var cloneVal=cloneVals[key];//console.log(\"$$$ finding any cloneVal: \" + JSON.stringify(cloneVal));\nif(cloneVal.type===type)return cloneVal.value;}console.log(\"!!! found no cloneVal for type: \"+type);return\"\";}// find a cloneValue based on type & value\n},{key:\"getCloneVal\",value:function getCloneVal(cloneVals,cmdKey){for(var key in cloneVals){var cloneVal=cloneVals[key];//console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\nif(cloneVal.id===cmdKey){return cloneVal;}}console.log(\"!!! failed to get cloneVal for cmdKey: \"+cmdKey);return null;}// delete cloneVals for a deleted Command\n},{key:\"deleteCloneVals\",value:function deleteCloneVals(cloneVals,cmdKey){console.log(\"!!! deleting cloneVals for cmd: \"+cmdKey);for(var key in cloneVals){var cloneVal=cloneVals[key];if(cloneVal.id===cmdKey)delete cloneVals[key];}}//remove configKey from Node\n},{key:\"removeConfigKey\",value:function removeConfigKey(nodes,nodeKey,configKey){console.log(\"!!! removing node configKey: \"+configKey);var node=nodes[nodeKey];var idx=node.configKeys.indexOf(configKey);node.configKeys.splice(idx,1);}//remove cmdKey from Config\n},{key:\"removeCmdKey\",value:function removeCmdKey(configs,configKey,cmdKey){console.log(\"!!! removing config cmdKey: \"+cmdKey);var config=configs[configKey];var idx=config.cmdKeys.indexOf(cmdKey);config.cmdKeys.splice(idx,1);}//remove ipAddrKey from Host\n},{key:\"removeIpAddrKey\",value:function removeIpAddrKey(hosts,hostKey,ipAddrKey){console.log(\"!!! removing ipAddrKey: \"+ipAddrKey);var host=hosts[hostKey];var idx=host.ipAddrKeys.indexOf(ipAddrKey);host.ipAddrKeys.splice(idx,1);}// use list of value objects to build selector option elements\n},{key:\"mapOptionElems\",value:function mapOptionElems(values){console.log(\"makeOptionElems \"+JSON.stringify(values));var optionItems=values.map(function(val){var option=val.value;var text=val.label;return/*#__PURE__*/_jsxs(\"option\",{value:option,children:[option,\"    == \",text]},option);});return optionItems;}// make a dynamic option selection based on one type of\n// cloneVals\n},{key:\"makeTypeOptions\",value:function makeTypeOptions(type,localNodeKey,matchType){console.log(\"makeTypeOptions for type: \"+type+\" localNodeKey:\"+localNodeKey+\" matchType: \"+matchType);// NOTE: matchType is with respect to local node key\n//    \"match\"    must match local node key\n//    \"exclude\"  must exclude local node key\n//    \"all\"      match all nodes\nvar typeVals=[];var cloneVals=this.state.cloneValues;for(var cmdKey in cloneVals){var cloneVal=cloneVals[cmdKey];var cloneNodeKey=cloneVal.nodeKey;console.log(\"makeTypeOptions check \"+cmdKey+\" nodeKey: \"+cloneNodeKey);// exclude local clones...want external clones only \nif(matchType===\"exclude\"&&cloneNodeKey===localNodeKey)continue;// include only local clones\nif(matchType===\"match\"&&cloneNodeKey!==localNodeKey)continue;if(cloneVal.type===type)typeVals.push(cloneVal);}// sort values in ascending order\ntypeVals=typeVals.sort(function(a,b){return a.value>b.value?1:b.value>a.value?-1:0;});console.log(\"makeTypeOptions typeVals: \"+JSON.stringify(typeVals));var optionItems=typeVals.map(function(typeVal){var option=typeVal.value;var text=typeVal.label;console.log(\"makeTypeOptions option= \"+option+\" text= \"+text);return/*#__PURE__*/_jsxs(\"option\",{value:option,children:[option,\"    == \",text]},option);});// the first item is not selectable, so this is a placeholder comment\noptionItems.unshift(/*#__PURE__*/_jsx(\"option\",{value:\"none\",children:\"(Select)\"},\"none\"));return optionItems;}// make static options from selections json\n},{key:\"makeOptionElems\",value:function makeOptionElems(paramId){console.log(\"makeOptionElems paramId: \"+paramId);var sels=selections[paramId];var optionItems=sels.map(function(selection,idx){var option=Object.keys(selection)[0];// get the first & only key\nvar text=selection[option];return/*#__PURE__*/_jsxs(\"option\",{value:option,children:[option,\"    == \",text]},idx);});optionItems.unshift(/*#__PURE__*/_jsx(\"option\",{value:\"none\",children:\"(Select)\"},\"none\"));return optionItems;}// get option's text from selections json\n},{key:\"getOptionText\",value:function getOptionText(paramId,option){var sels=selections[paramId];//console.log(\"getOptionText paramId:\" + paramId + \" option: \" + option);\nfor(var i=0;i<sels.length;i++){var select=sels[i];if(Object.keys(select)[0]===option){return select[option];}}return\"\";}// make Model Load Buttons elem\n},{key:\"makeModelButtonsElem\",value:function makeModelButtonsElem(){var dimNetBtns=false;if(this.state.makeNewNetModel||this.state.loadNetModel)dimNetBtns=true;var dimIonBtns=false;if(this.state.makeNewIonModel||this.state.loadIonModel)dimIonBtns=true;return/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{className:\"text-right\",sm:2,children:/*#__PURE__*/_jsx(\"h4\",{children:/*#__PURE__*/_jsx(\"b\",{children:\"Net Model File\"})})}),/*#__PURE__*/_jsx(Col,{sm:2,children:/*#__PURE__*/_jsxs(ButtonToolbar,{children:[/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"primary\",disabled:dimNetBtns,onClick:this.loadNetModel.bind(this),children:\"Load\"}),/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"primary\",disabled:dimNetBtns,onClick:this.newNetModel.bind(this),children:\"New\"})]})}),/*#__PURE__*/_jsx(Col,{sm:2,children:/*#__PURE__*/_jsx(\"h4\",{children:/*#__PURE__*/_jsx(\"b\",{children:\"...can initialize a new...\"})})}),/*#__PURE__*/_jsx(Col,{className:\"text-right\",sm:2,children:/*#__PURE__*/_jsx(\"h4\",{children:/*#__PURE__*/_jsx(\"b\",{children:\"ION Model File\"})})}),/*#__PURE__*/_jsx(Col,{sm:2,children:/*#__PURE__*/_jsxs(ButtonToolbar,{children:[/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"primary\",disabled:dimIonBtns,onClick:this.loadIonModel.bind(this),children:\"Load\"}),/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"primary\",disabled:dimIonBtns,onClick:this.newIonModel.bind(this),children:\"New\"})]})})]});}// make Ion Model Loader element\n},{key:\"makeIonModelLoaderElem\",value:function makeIonModelLoaderElem(){console.log(\"++++makeIonModelLoaderElem\");var getUniqId=this.getUniqId.bind(this);var makeCloneVal=this.makeCloneVal.bind(this);var findCloneVal=this.findCloneVal.bind(this);var noLoadIonModel=this.noLoadIonModel.bind(this);var dispatch=this.dispatch.bind(this);// make sure dispatch remembers \"this\"\nreturn/*#__PURE__*/_jsx(IonModelLoader,{getUniqId:getUniqId// function\n,makeCloneVal:makeCloneVal// function\n,findCloneVal:findCloneVal// function\n,noLoadIonModel:noLoadIonModel// function\n,dispatch:dispatch// function\n},\"ionmodel\");}// build and return a IonModel element\n},{key:\"makeIonModelElem\",value:function makeIonModelElem(){console.log(\"makeIonModelElem ionModel:\"+JSON.stringify(this.state.ionModel));var name=this.state.ionModel.name;var desc=this.state.ionModel.desc;var nextNodeNum=this.state.ionModel.nextNodeNum;var current=this.state.ionModel.currentContacts;var graphs=this.state.graphs;var hosts=this.state.hosts;var ipaddrs=this.state.ipaddrs;var nodes=this.state.nodes;var configs=this.state.configs;var commands=this.state.commands;var cloneVals=this.state.cloneValues;var getNodeKey=this.getNodeKey.bind(this);var isGoodName=this.isGoodName.bind(this);var usedNodeKey=this.usedNodeKey.bind(this);var isGoodNodeKey=this.isGoodNodeKey.bind(this);var isGoodNodeNum=this.isGoodNodeNum.bind(this);var getValues=this.getValues.bind(this);var makeOptElems=this.makeOptionElems.bind(this);var makeTypeOpts=this.makeTypeOptions.bind(this);var getOptText=this.getOptionText.bind(this);var dispatch=this.dispatch.bind(this);// make sure dispatch remembers \"this\"\nreturn/*#__PURE__*/_jsx(IonModel,{// unique id\nname:name// state\n,desc:desc// state\n,nextNodeNum:nextNodeNum// state\n,currentContacts:current// state\n,graphs:graphs// state\n,hosts:hosts// state\n,ipaddrs:ipaddrs// state\n,nodes:nodes// state\n,configs:configs// state\n,commands:commands// state\n,cloneValues:cloneVals// state\n,isGoodName:isGoodName// verify name string is valid\n,usedNodeKey:usedNodeKey// used as a node key?\n,isGoodNodeKey:isGoodNodeKey// verify nodeKey not in use\n,isGoodNodeNum:isGoodNodeNum// verify node num not in use\n,getNodeKey:getNodeKey// find nodeKey from cmdKey\n,getValues:getValues// get command value list\n,makeOptionElems:makeOptElems// options selector\n,makeTypeOptions:makeTypeOpts// make type options\n,getOptionText:getOptText// get opt text\n,dispatch:dispatch// dispatch func for new configs\n},name);}// make Net Model Loader element\n},{key:\"makeNetModelLoaderElem\",value:function makeNetModelLoaderElem(){console.log(\"++++makeNetModelLoaderElem\");var netAddrs=this.state.netAddrs;// state\nvar noLoadNetModel=this.noLoadNetModel.bind(this);var dispatch=this.dispatch.bind(this);// make sure dispatch remembers \"this\"\nreturn/*#__PURE__*/_jsx(NetModelLoader,{netAddrs:netAddrs// state\n,noLoadNetModel:noLoadNetModel// function\n,dispatch:dispatch// function\n},\"netmodel\");}// build and return a NetModel element\n},{key:\"makeNetModelElem\",value:function makeNetModelElem(netElems){console.log(\"makeNetModelElem netModel:\"+JSON.stringify(this.state.netModel));var name=this.state.netModel.name;var desc=this.state.netModel.desc;var netHosts=this.state.netHosts;var netNodes=this.state.netNodes;var netHops=this.state.netHops;var netAddrs=this.state.netAddrs;var getIonModel=this.getIonModel.bind(this);var isGoodName=this.isGoodName.bind(this);var isGoodNetHostKey=this.isGoodNetHostKey.bind(this);var isGoodNetNodeKey=this.isGoodNetNodeKey.bind(this);var isGoodNetHopKey=this.isGoodNetHopKey.bind(this);var makeOptElems=this.makeOptionElems.bind(this);var mapOptElems=this.mapOptionElems.bind(this);var makeTypeOpts=this.makeTypeOptions.bind(this);var getUniqId=this.getUniqId.bind(this);var makeCloneVal=this.makeCloneVal.bind(this);var findCloneVal=this.findCloneVal.bind(this);var isStandProt=this.isStandardProtocol.bind(this);var dispatch=this.dispatch.bind(this);// make sure dispatch remembers \"this\"\nreturn/*#__PURE__*/_jsx(NetModel,{// unique id\nname:name// state\n,desc:desc// state\n,netHosts:netHosts// state\n,netNodes:netNodes// state\n,netHops:netHops// state\n,netAddrs:netAddrs// state\n,getIonModel:getIonModel// get ion model handle\n,isGoodName:isGoodName// verify name string is valid\n,isGoodNetHostKey:isGoodNetHostKey// verify hostKey not in use\n,isGoodNetNodeKey:isGoodNetNodeKey// verify nodeKey not in use\n,isGoodNetHopKey:isGoodNetHopKey// verify hopKey not in use\n,dispatch:dispatch// dispatch func for new configs\n,makeOptionElems:makeOptElems// make static options \n,mapOptionElems:mapOptElems// map options elems\n,makeTypeOptions:makeTypeOpts// make type options\n,getUniqId:getUniqId// function\n,makeCloneVal:makeCloneVal// function\n,findCloneVal:findCloneVal// function\n,isStandardProtocol:isStandProt// check protocol\n},name);}},{key:\"makeNewNetElem\",value:function makeNewNetElem(){console.log(\"makeNewNetElem\");var id=this.state.newNetModelName;var form=/*#__PURE__*/_jsx(FormControl,{bsSize:\"sm\",type:\"text\",value:id,spellCheck:\"false\",onChange:this.handleNewNet});var icon='remove';return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(Col,{className:\"text-right\",sm:2,children:/*#__PURE__*/_jsx(\"b\",{children:\"New Net Model Name:\"})}),/*#__PURE__*/_jsx(Col,{sm:1,children:form}),/*#__PURE__*/_jsx(Col,{sm:1,children:\"(no spaces)\"}),/*#__PURE__*/_jsx(Col,{sm:2,children:/*#__PURE__*/_jsxs(ButtonToolbar,{children:[/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"primary\",onClick:this.submitNewNet,children:\"Submit\"}),/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"success\",onClick:this.noNewNetModel.bind(this),children:/*#__PURE__*/_jsx(Glyphicon,{glyph:icon})})]})})]});}},{key:\"makeNewIonElem\",value:function makeNewIonElem(){console.log(\"makeNewIonElem\");var id=this.state.newIonModelName;var form=/*#__PURE__*/_jsx(FormControl,{bsSize:\"sm\",type:\"text\",value:id,spellCheck:\"false\",onChange:this.handleNewIon});var icon='remove';return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(Col,{className:\"text-right\",sm:2,children:/*#__PURE__*/_jsx(\"b\",{children:\"New ION Model Name:\"})}),/*#__PURE__*/_jsx(Col,{sm:1,children:form}),/*#__PURE__*/_jsx(Col,{sm:1,children:\"(no spaces)\"}),/*#__PURE__*/_jsx(Col,{sm:2,children:/*#__PURE__*/_jsxs(ButtonToolbar,{children:[/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"primary\",onClick:this.submitNewIon,children:\"Submit\"}),/*#__PURE__*/_jsx(Button,{bsSize:\"sm\",bsStyle:\"success\",onClick:this.noNewIonModel.bind(this),children:/*#__PURE__*/_jsx(Glyphicon,{glyph:icon})})]})})]});}// upon any parameter UPDATE transaction\n// check if a clone entry must be updated \n//  ... and therfore cloning is needed \n// (command value is already changed)\n},{key:\"updateClones\",value:function updateClones(cmds,cloneVals,nodeKey,cmdObj,tranTime){var cmdKey=cmdObj.id;var cmdTypeKey=cmdObj.typeKey;var isCloned=false;if(cmdTypeKey===\"node_nodenum\")// special model commands (non-ion)\nisCloned=true;else if(cmdTypeKey===\"host_ipaddr\")// special model commands (non-ion)\nisCloned=true;else{var cmdType=cmdTypes[cmdTypeKey];isCloned=cmdType.isCloned;}console.log(\"=== updateClones().  type: \"+cmdKey+\" isCloned: \"+isCloned);if(isCloned){// the clone source is command-centric & presumes exactly one clone-able value is possible\n//  ... that clone-able value may be complex, like endpoints or duct names\n//  and complex values must be built from the full command value list\nvar cloneVal=this.getCloneVal(cloneVals,cmdKey);if(cloneVal){console.log(\"=== updating cloneVal.\");var newCloneVal=this.makeCloneVal(nodeKey,cmdObj);// build new cloneVal\nnewCloneVal.clones=cloneVal.clones;//recapture clones list\ncloneVal=newCloneVal;// replace the cloneVal object\ncloneVals[cmdKey]=newCloneVal;// update the cloneVals array\n// then update each dependent clone command\nfor(var i=0;i<cloneVal.clones.length;i++){var clone=cloneVal.clones[i];console.log(\"$$$updating clone cmd: \"+clone.cmdKey+\" value #:\"+clone.valIdx);var clonedCmd=cmds[clone.cmdKey];var vals=clonedCmd.values;vals[clone.valIdx]=cloneVal.value;this.updateCommand(cmds,clone.cmdKey,tranTime,vals);// now check for recursive cloning!\nvar cloneCmdType=cmdTypes[clonedCmd.typeKey];// now check if we just updated a clone-able command...causing a chain reaction\nif(cloneCmdType.isCloned){this.updateClones(cmds,cloneVals,nodeKey,clonedCmd,tranTime);}}}}// console.log(\"=== Review updated cloneVals. \");\n//for (let key in cloneVals) {\n//let cloneVal = cloneVals[key];\n//console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n//}\nreturn null;}// function to update one command \n//  (may be many from one transaction due to cloning)\n},{key:\"updateCommand\",value:function updateCommand(cmds,cmdKey,tranTime,values){console.log(\"updating cmdKey:\"+cmdKey+\" to \"+JSON.stringify(values));cmds[cmdKey].values=values;cmds[cmdKey].lastUpdate=tranTime;return null;}// check if this commmand has a cloned parameter\n},{key:\"cmdIsCloned\",value:function cmdIsCloned(cmdKey){var cmdType=this.getCmdType(cmdKey);if(cmdType.copyClone||cmdType.pickClone)return true;return false;}},{key:\"getCmdCloneType\",value:function getCmdCloneType(cmdKey){var cmdType=this.getCmdType(cmdKey);for(var i=0;i<cmdType.paramTypes.length;i++){var paramTypeKey=cmdType.paramTypes[i];var paramType=paramTypes[paramTypeKey];if(paramType.pickClone||paramType.copyClone)return paramType.valType;}console.log(\"getCmdCloneType found none.\");return\"\";}// get cloned value from parameter list\n},{key:\"getCmdClonedValue\",value:function getCmdClonedValue(cmdKey){var cmd=this.state.commands[cmdKey];var cmdType=this.getCmdType(cmdKey);for(var i=0;i<cmdType.paramTypes.length;i++){var paramTypeKey=cmdType.paramTypes[i];var paramType=paramTypes[paramTypeKey];if(paramType.pickClone||paramType.copyClone)return cmd.values[i];}console.log(\"getCmdClonedValue found none.\");return\"\";}// an update to a \"picked\" cloneValue requires updates to clone lists\n},{key:\"switchCloneVal\",value:function switchCloneVal(cloneVals,cmdKey,values,initValues){console.log(\"switchCloneVals was:\"+JSON.stringify(initValues));console.log(\"switchCloneVals  is:\"+JSON.stringify(values));var cmdType=this.getCmdType(cmdKey);for(var i=0;i<cmdType.paramTypes.length;i++){var paramTypeKey=cmdType.paramTypes[i];var paramType=paramTypes[paramTypeKey];if(paramType.pickClone){// this might need a switch\nif(values[i]!==initValues[i]){console.log(\"+++ switchCloneVals found value change for param:\"+i);this.removeClone(cloneVals,cmdKey,paramType.valType,initValues[i]);this.addClone(cloneVals,cmdKey,paramType.valType,values[i],i);}}}console.log(\"=== Review updated cloneVals.\");//for (let key in cloneVals) {\n//let cloneVal = cloneVals[key];\n//console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n//}\nreturn null;}},{key:\"removeClone\",value:function removeClone(cloneVals,cmdKey,type,value){console.log(\"removeClone cmdKey:\"+cmdKey+\" type: \"+type+\" value: \"+value);if(value==='??')// just a fake default value\nreturn null;var cloneVal=this.findCloneVal(cloneVals,type,value);if(cloneVal!==null){for(var i=0;i<cloneVal.clones.length;i++){var cloneObj=cloneVal.clones[i];if(cmdKey===cloneObj.cmdKey){console.log(\"deleting clone entry no: \"+i);cloneVal.clones.splice(i,1);break;}}}}},{key:\"addClone\",value:function addClone(cloneVals,cmdKey,type,value,valIdx){console.log(\"addClone cmdKey:\"+cmdKey+\" type: \"+type+\" value: \"+value);var cloneVal=this.findCloneVal(cloneVals,type,value);if(cloneVal===null){console.log(\"!!! Failed to addClone for \"+cmdKey+\" value: \"+value);return;}var clone={\"cmdKey\":cmdKey,\"valIdx\":valIdx};cloneVal.clones.push(clone);console.log(\"$$$ checking add to  cloneVal: \"+JSON.stringify(cloneVal));}// special case of nodeNum clone\n},{key:\"getNodeNum\",value:function getNodeNum(nodeKey){console.log(\"getNodeNum nodeKey: \"+nodeKey);var nodes=this.state.nodes;var node=nodes[nodeKey];return node.ionNodeNum;}},{key:\"setNodeNum\",value:function setNodeNum(nodeKey,nodeNum){console.log(\"setNodeNum nodeKey: \"+nodeKey+\" nodeNum =\"+nodeNum);var nodes=this.state.nodes;var node=nodes[nodeKey];node.ionNodeNum=nodeNum;return null;}// all transactions are handled centrally with the combined state (REDUX-style)\n},{key:\"dispatch\",value:function dispatch(transaction){console.log(\"====dispatch called with transaction: \"+JSON.stringify(transaction));var now=new Date();var tranTime=now.format(\"YYYY-MM-DDThh:mm\");// containers for new state\nvar newIonModel;var newNetModel;var newNodes;var newHosts;var newIpAddrs;var newNetHosts;var newNetNodes;var newNetHops;var newGraphs;var newConfigs;var newCommands;var newCloneVals;var graphKey;var nodeKey;var hostKey;var hopKey;var ipAddr;var configKey;var cmdKey;var cmdObj;var cloneVal;var cmdType;var configType;var desc;var initVals;var numCmdKey;var nodeCmdKey;var nodeHost;var nodeType;var endpointID;var ipAddrKey;var services;switch(transaction.action){case\"UPDATE-COMMAND\":console.log(\"dispatch UPDATE called!\");newCommands=Object.assign({},this.state.commands);newCloneVals=Object.assign({},this.state.cloneValues);// first update primary command\nnodeKey=transaction.nodeKey;cmdKey=transaction.cmdKey;cmdType=this.getCmdType(cmdKey);console.log(\"UPDATE cmdType=\"+JSON.stringify(cmdType));if(cmdType.pickClone){// could this command be choosing a different clone value?\n//  a change of selection must notify the cloneVals\ninitVals=this.getValues(cmdKey);console.log(\"+++ A better init vals??:\"+JSON.stringify(initVals));this.switchCloneVal(newCloneVals,cmdKey,transaction.values,transaction.initValues);}this.updateCommand(newCommands,cmdKey,tranTime,transaction.values);// now look for cloning\ncmdObj=newCommands[cmdKey];this.updateClones(newCommands,newCloneVals,nodeKey,cmdObj,tranTime);this.setState({\"commands\":newCommands,\"cloneValues\":newCloneVals});console.log(\"new values of cmd: \"+cmdKey+\" are \"+JSON.stringify(this.state.commands[cmdKey].values));console.log(\"new commands (all):\"+JSON.stringify(this.state.commands));console.log(\"=== Review updated cloneVals.\");var cloneVals=this.state.cloneValues;for(var key in cloneVals){var _cloneVal=cloneVals[key];console.log(\"$$$ checking cloneVal: \"+JSON.stringify(_cloneVal));}break;case\"DELETE-COMMAND\":console.log(\"dispatch DELETE-COMMAND called!\");newConfigs=Object.assign({},this.state.configs);newCommands=Object.assign({},this.state.commands);newCloneVals=Object.assign({},this.state.cloneValues);// first update primary command\nnodeKey=transaction.nodeKey;cmdKey=transaction.cmdKey;configKey=transaction.configKey;if(this.cmdIsCloned(cmdKey)){var cloneType=this.getCmdCloneType(cmdKey);var _cloneVal2=this.getCmdClonedValue(cmdKey);console.log(\"$$$ call removeClone \"+cmdKey+\" \"+cloneType+\" \"+_cloneVal2);this.removeClone(newCloneVals,cmdKey,cloneType,_cloneVal2);}this.deleteCloneVals(newCloneVals,cmdKey);this.removeCmdKey(newConfigs,configKey,cmdKey);delete newCommands[cmdKey];console.log(\"=== Review updated cloneVals. \");for(var _key in newCloneVals){var _cloneVal3=newCloneVals[_key];console.log(\"$$$ checking cloneVal: \"+JSON.stringify(_cloneVal3));}this.setState({\"commands\":newCommands,\"cloneValues\":newCloneVals});break;case\"NEW-COMMAND\":console.log(\"dispatch NEW-COMMAND called!\");console.log(\"NEW-COMMAND state.commands cnt: \"+Object.keys(this.state.commands).length);newConfigs=Object.assign({},this.state.configs);newCommands=Object.assign({},this.state.commands);newCloneVals=Object.assign({},this.state.cloneValues);configKey=transaction.configKey;var cmdTypeKey=transaction.cmdTypeKey;nodeKey=transaction.nodeKey;cmdType=cmdTypes[cmdTypeKey];var cmdName=cmdType.name;cmdKey=\"cmd_\"+this.getUniqId();var valCnt=cmdType.paramCnt;var order=cmdType.order;var values=[];for(var i=0;i<valCnt;i++){var paramTypeKey=cmdType.paramTypes[i];var paramType=paramTypes[paramTypeKey];console.log(\"NEW-COMMAND paramType: \"+JSON.stringify(paramType));var copyClone=false;var pickClone=false;if(paramType.hasOwnProperty(\"copyClone\"))// 1st check for existence\ncopyClone=paramType.copyClone;if(paramType.hasOwnProperty(\"pickClone\"))// 1st check for existence\npickClone=paramType.pickClone;if(copyClone&&paramType.valType===\"nodeNum\"){var nodeNum=this.getNodeNum(nodeKey);values.push(nodeNum);this.addClone(newCloneVals,cmdKey,\"nodeNum\",nodeNum,i);}else if(copyClone&&paramType.valType===\"nodeKey\"){values.push(nodeKey);this.addClone(newCloneVals,cmdKey,\"nodeKey\",nodeKey,i);}else if(pickClone){//let pickVal = this.getAnyCloneVal(newCloneVals,paramType.valType);\n//values.push(pickVal);\nvalues.push(\"??\");}else if(paramType.showDefault){if(paramType.hasOwnProperty('defaultValue'))values.push(paramType.defaultValue);else alert(\"No defaultValue provided for: \"+paramTypeKey);}else values.push(\"\");};console.log(\"NEW-COMMAND old cmds cnt: \"+Object.keys(newCommands).length);newCommands[cmdKey]={\"id\":cmdKey,\"configKey\":configKey,\"typeKey\":cmdTypeKey,\"typeName\":cmdName,\"order\":order,\"lastUpdate\":tranTime,\"values\":values};console.log(\"NEW-COMMAND new cmds cnt: \"+Object.keys(newCommands).length);var cmdKeyList=newConfigs[configKey].cmdKeys;var idx=0;for(idx=0;idx<cmdKeyList.length;idx++){var _cmdKey=cmdKeyList[idx];var cmd=newCommands[_cmdKey];var next=cmd.order;console.log(\"checking order: \"+order+\" vs. next: \"+next);if(order<next)break;}console.log(\"NEW-COMMAND splicing at: \"+idx);cmdKeyList.splice(idx,0,cmdKey);console.log(\"NEW-COMMAND cmdList: \"+JSON.stringify(cmdKeyList));// if cloned, build object with clone-able value\n// yes, even if required values are un-specified!\nif(cmdType.isCloned){cloneVal=this.makeCloneVal(nodeKey,newCommands[cmdKey]);var cvKey=cloneVal.id;newCloneVals[cvKey]=cloneVal;}this.setState({\"configs\":newConfigs,\"commands\":newCommands,\"cloneValues\":newCloneVals});console.log(\"new command idx: \"+idx+\"  command: \"+cmdName+\" params:\"+values);break;case\"NEW-CONFIG\":console.log(\"dispatch NEW-CONFIG called!\");newNodes=Object.assign({},this.state.nodes);newConfigs=Object.assign({},this.state.configs);nodeKey=transaction.nodeKey;configType=transaction.configType;configKey=nodeKey+\".\"+configType;newConfigs[configKey]={\"id\":configKey,\"nodeKey\":nodeKey,\"configType\":configType,\"cmdKeys\":[]};newNodes[nodeKey].configKeys.push(configKey);this.setState({nodes:newNodes,configs:newConfigs});break;case\"DELETE-CONFIG\":console.log(\"dispatch DELETE-CONFIG called!\");newNodes=Object.assign({},this.state.nodes);newConfigs=Object.assign({},this.state.configs);// first update primary command\nnodeKey=transaction.nodeKey;configKey=transaction.configKey;this.removeConfigKey(newNodes,nodeKey,configKey);delete newConfigs[configKey];this.setState({\"nodes\":newNodes,\"configs\":newConfigs});break;case\"NEW-NODE\":console.log(\"dispatch NEW-NODE called!\");newIonModel=Object.assign({},this.state.ionModel);console.log(\"newionModel: \"+JSON.stringify(newIonModel));newNodes=Object.assign({},this.state.nodes);newCloneVals=Object.assign({},this.state.cloneValues);nodeKey=transaction.nodeKey;var nextNodeNum=+this.state.ionModel.nextNodeNum;var topVersion=selections.node_version[0];// get topmost node_version selection object\nvar latestIonVer=Object.keys(topVersion)[0];// first item assumed to be latest version\nwhile(!this.isGoodNodeNum(nodeKey,nextNodeNum)){// if not good, increment\nnextNodeNum+=1;}// artificially create cloneVal for nodeNum  & nodeKey (not directly based on a on ion command)\nnumCmdKey=\"nodeNum_\"+nodeKey;cmdObj={\"id\":numCmdKey,\"typeKey\":\"node_nodenum\",\"values\":[nextNodeNum]};cloneVal=this.makeCloneVal(nodeKey,cmdObj);newCloneVals[numCmdKey]=cloneVal;nodeCmdKey=\"node_\"+nodeKey;cmdObj={\"id\":nodeCmdKey,\"typeKey\":\"node_nodekey\",\"values\":[nodeKey]};cloneVal=this.makeCloneVal(nodeKey,cmdObj);newCloneVals[nodeCmdKey]=cloneVal;console.log(\"New cloneVals: \"+JSON.stringify(newCloneVals));newNodes[nodeKey]={\"id\":nodeKey,\"name\":nodeKey,\"ionNodeNum\":nextNodeNum,\"ionVersion\":latestIonVer,\"hostKey\":\"\",\"configKeys\":[]};nextNodeNum+=1;newIonModel.nextNodeNum=nextNodeNum;this.setState({ionModel:newIonModel,nodes:newNodes,cloneValues:newCloneVals});console.log(\"New state cloneValues: \"+JSON.stringify(this.state.cloneValues));break;case\"UPDATE-NODE\":console.log(\"dispatch UPDATE-NODE called!\");newNodes=Object.assign({},this.state.nodes);newCommands=Object.assign({},this.state.commands);newCloneVals=Object.assign({},this.state.cloneValues);nodeKey=transaction.nodeKey;newNodes[nodeKey][\"longName\"]=transaction.desc;newNodes[nodeKey][\"ionNodeNum\"]=transaction.nodeNum;newNodes[nodeKey][\"ionVersion\"]=transaction.version;newNodes[nodeKey][\"hostKey\"]=transaction.hostKey;numCmdKey=\"nodeNum_\"+nodeKey;cmdObj={\"id\":numCmdKey,\"typeKey\":\"node_nodenum\",\"values\":[transaction.nodeNum]};this.updateClones(newCommands,newCloneVals,nodeKey,cmdObj,tranTime);console.log(\"$$$ updated clones for:\"+transaction.nodeNum);this.setState({nodes:newNodes,commands:newCommands,cloneValues:newCloneVals});break;case\"NEW-HOST\":console.log(\"dispatch NEW-HOST called!\");newHosts=Object.assign({},this.state.hosts);newCloneVals=Object.assign({},this.state.cloneValues);hostKey=transaction.hostKey;newHosts[hostKey]={id:hostKey,desc:\"\",// default\nlinefeed:\"unix\",// default\nipAddrKeys:[]};// create new clone value\nvar hostCmdKey=\"host_\"+hostKey;cmdObj={\"id\":hostCmdKey,\"typeKey\":\"host_hostkey\",\"values\":[hostKey]};cloneVal=this.makeCloneVal(\"network\",cmdObj);newCloneVals[hostCmdKey]=cloneVal;this.setState({hosts:newHosts,cloneValues:newCloneVals});console.log(\"New state cloneValues: \"+JSON.stringify(newCloneVals));console.log(\"New state hosts: \"+JSON.stringify(newHosts));break;case\"UPDATE-HOST\":console.log(\"dispatch UPDATE-HOST called!\");newHosts=Object.assign({},this.state.hosts);hostKey=transaction.hostKey;newHosts[hostKey][\"desc\"]=transaction.desc;newHosts[hostKey][\"linefeed\"]=transaction.linefeed;// ipAddrs are created/edited/deleted separately\n// no affect on clone values\nthis.setState({hosts:newHosts});break;case\"NEW-IPADDR\":console.log(\"dispatch NEW-IPADDR called!\");newHosts=Object.assign({},this.state.hosts);newIpAddrs=Object.assign({},this.state.ipaddrs);newCloneVals=Object.assign({},this.state.cloneValues);hostKey=transaction.hostKey;ipAddr=transaction.ipAddr;// set up clone value\nipAddrKey=\"ipAddr_\"+this.getUniqId();cmdObj={\"id\":ipAddrKey,\"typeKey\":\"host_ipaddr\",\"values\":[ipAddr]};cloneVal=this.makeCloneVal(hostKey,cmdObj);newCloneVals[ipAddrKey]=cloneVal;newHosts[hostKey].ipAddrKeys.push(ipAddrKey);newIpAddrs[ipAddrKey]={\"id\":ipAddrKey,\"hostKey\":hostKey,\"ipAddr\":ipAddr};this.setState({hosts:newHosts,ipaddrs:newIpAddrs,cloneValues:newCloneVals});console.log(\"New state cloneValues: \"+JSON.stringify(newCloneVals));console.log(\"New state hosts: \"+JSON.stringify(newHosts));console.log(\"New state ipaddrs: \"+JSON.stringify(newIpAddrs));break;case\"CHANGE-IPADDR\":console.log(\"dispatch CHANGE-IPADDR called!  host: \"+transaction.hostKey+\" addr: \"+transaction.ipAddr);// nothing will change in Hosts...the ipAddrKey is unchanged\nnewCommands=Object.assign({},this.state.commands);// cloning might change commands\nnewIpAddrs=Object.assign({},this.state.ipaddrs);newCloneVals=Object.assign({},this.state.cloneValues);hostKey=transaction.hostKey;ipAddrKey=transaction.ipAddrKey;ipAddr=transaction.ipAddr;newIpAddrs[ipAddrKey].ipAddr=ipAddr;// update state object\n// update cloneVals and clones\ncmdObj={\"id\":ipAddrKey,\"typeKey\":\"host_ipaddr\",\"values\":[ipAddr]};this.updateClones(newCommands,newCloneVals,hostKey,cmdObj,tranTime);this.setState({ipaddrs:newIpAddrs,commands:newCommands,cloneValues:newCloneVals});console.log(\"New state cloneValues: \"+JSON.stringify(newCloneVals));console.log(\"New state hosts: \"+JSON.stringify(newIpAddrs));break;case\"DELETE-IPADDR\":console.log(\"dispatch DELETE-IPADDR called!\"+transaction.index+\" \"+transaction.ipAddr);newHosts=Object.assign({},this.state.hosts);newIpAddrs=Object.assign({},this.state.ipaddrs);newCloneVals=Object.assign({},this.state.cloneValues);hostKey=transaction.hostKey;ipAddrKey=transaction.ipAddrKey;this.removeIpAddrKey(newHosts,hostKey,ipAddrKey);delete newIpAddrs[ipAddrKey];this.deleteCloneVals(newCloneVals,ipAddrKey);this.setState({hosts:newHosts,ipaddrs:newIpAddrs,cloneValues:newCloneVals});console.log(\"New state cloneValues: \"+JSON.stringify(newCloneVals));console.log(\"New state hosts: \"+JSON.stringify(newHosts));break;case\"NEW-NET-HOST\":console.log(\"dispatch NEW-NET-HOST called! \"+transaction.hostKey);newNetHosts=Object.assign({},this.state.netHosts);hostKey=transaction.hostKey;newNetHosts[hostKey]={\"id\":hostKey,\"hostDesc\":\"\",\"ipAddrs\":[]};this.setState({netHosts:newNetHosts});console.log(\"New state netHosts: \"+JSON.stringify(this.state.netHosts));break;case\"UPDATE-NET-HOST\":console.log(\"dispatch UPDATE-NET-HOST called!\");newNetHosts=Object.assign({},this.state.netHosts);hostKey=transaction.hostKey;newIpAddrs=newNetHosts[hostKey].ipAddrs;// just carry old addrs over\nnewNetHosts[hostKey]={\"id\":hostKey,\"hostDesc\":transaction.desc,\"ipAddrs\":newIpAddrs};this.setState({netHosts:newNetHosts});console.log(\"New state netHosts: \"+JSON.stringify(newNetHosts));break;case\"DELETE-NET-HOST\":hostKey=transaction.hostKey;console.log(\"dispatch DELETE-NET-HOST called! \"+hostKey);newNetHosts=Object.assign({},this.state.netHosts);delete newNetHosts[hostKey];this.setState({netHosts:newNetHosts});console.log(\"New state netHosts: \"+JSON.stringify(this.state.netHosts));break;case\"NEW-NETADDR\":console.log(\"dispatch NEW-NETADDR called!\"+transaction.hostKey+\" addr: \"+transaction.ipAddr);newHosts=Object.assign({},this.state.netHosts);newIpAddrs=this.state.netAddrs;hostKey=transaction.hostKey;ipAddr=transaction.ipAddr;newIpAddrs.push(ipAddr);newHosts[hostKey].ipAddrs.push(ipAddr);this.setState({netHosts:newHosts,netAddrs:newIpAddrs});console.log(\"New state net hosts: \"+JSON.stringify(newHosts));console.log(\"New state net ipaddrs: \"+JSON.stringify(newIpAddrs));break;case\"CHANGE-NETADDR\":console.log(\"dispatch CHANGE-NETADDR called!  host: \"+transaction.hostKey+\" addr: \"+transaction.isIpAddr);newHosts=Object.assign({},this.state.netHosts);newIpAddrs=this.state.netAddrs;hostKey=transaction.hostKey;var isIpAddr=transaction.isIpAddr;var wasIpAddr=transaction.wasIpAddr;var hostAddrs=newHosts[hostKey].ipAddrs;for(i=0;i<newIpAddrs.length;i++){if(newIpAddrs[i]===wasIpAddr){newIpAddrs[i]=isIpAddr;break;}}for(i=0;i<hostAddrs.length;i++){if(hostAddrs[i]===wasIpAddr){hostAddrs[i]=isIpAddr;break;}}this.setState({netHosts:newHosts,netAddrs:newIpAddrs});console.log(\"New state net hosts: \"+JSON.stringify(newHosts));console.log(\"New state net addrs: \"+JSON.stringify(newIpAddrs));break;case\"DELETE-NETADDR\":console.log(\"dispatch DELETE-NETADDR called! \"+transaction.hostKey+\" \"+transaction.ipAddr);newHosts=Object.assign({},this.state.netHosts);newIpAddrs=this.state.netAddrs;hostKey=transaction.hostKey;ipAddr=transaction.ipAddr;for(i=0;i<newIpAddrs.length;i++){if(newIpAddrs[i]===ipAddr){newIpAddrs.splice(i,1);break;}}hostAddrs=newHosts[hostKey].ipAddrs;for(i=0;i<hostAddrs.length;i++){if(hostAddrs[i]===ipAddr){hostAddrs.splice(i,1);newHosts[hostKey].ipAddrs=hostAddrs;break;}}this.setState({netHosts:newHosts,netAddrs:newIpAddrs});console.log(\"New state net hosts: \"+JSON.stringify(newHosts));console.log(\"New state net addrs: \"+JSON.stringify(newIpAddrs));break;case\"NEW-NET-NODE\":console.log(\"dispatch NEW-NET-NODE called! \"+transaction.nodeKey);newNetNodes=Object.assign({},this.state.netNodes);nodeKey=transaction.nodeKey;newNetNodes[nodeKey]={\"id\":nodeKey,\"nodeDesc\":\"\",\"nodeHost\":\"\",\"nodeType\":\"\",\"endpointID\":\"\",\"services\":[]};this.setState({netNodes:newNetNodes});console.log(\"New state netNodes: \"+JSON.stringify(this.state.netNodes));break;case\"UPDATE-NET-NODE\":console.log(\"dispatch UPDATE-NET-NODE called!\");newNetNodes=Object.assign({},this.state.netNodes);nodeKey=transaction.nodeKey;desc=transaction.desc;nodeHost=transaction.nodeHost;nodeType=transaction.nodeType;endpointID=transaction.endpointID;services=transaction.services;newNetNodes[nodeKey]={\"id\":nodeKey,\"nodeDesc\":desc,\"nodeHost\":nodeHost,\"nodeType\":nodeType,\"endpointID\":endpointID,\"services\":services};this.setState({netNodes:newNetNodes});break;case\"DELETE-NET-NODE\":nodeKey=transaction.nodeKey;console.log(\"dispatch DELETE-NET-NODE called! \"+nodeKey);newNetNodes=Object.assign({},this.state.netNodes);delete newNetNodes[nodeKey];this.setState({netNodes:newNetNodes});console.log(\"New state netNodes: \"+JSON.stringify(this.state.netNodes));break;case\"NEW-NET-HOP\":console.log(\"dispatch NEW-NET-HOP called! \"+transaction.hopKey);newNetHops=Object.assign({},this.state.netHops);hopKey=transaction.hopKey;newNetHops[hopKey]={\"id\":hopKey,\"hopDesc\":\"\",\"toNode\":\"\",\"fromNode\":\"\",\"bpLayer\":\"\",\"ltpLayer\":\"\",\"maxRate\":0,\"symmetric\":false};this.setState({netHops:newNetHops});console.log(\"New state netHops: \"+JSON.stringify(this.state.netHops));break;case\"UPDATE-NET-HOP\":console.log(\"dispatch UPDATE-NET-HOP called!\");newNetHops=Object.assign({},this.state.netHops);hopKey=transaction.hopKey;newNetHops[hopKey]={\"id\":hopKey,\"hopDesc\":transaction.desc,\"toNode\":transaction.toNode,\"fromNode\":transaction.fromNode,\"bpLayer\":transaction.bpLayer,\"ltpLayer\":transaction.ltpLayer,\"maxRate\":transaction.maxRate,\"symmetric\":transaction.symmetric};this.setState({netHops:newNetHops});break;case\"DELETE-NET-HOP\":hopKey=transaction.hopKey;console.log(\"dispatch DELETE-NET-HOP called! \"+hopKey);newNetHops=Object.assign({},this.state.netHops);delete newNetHops[hopKey];this.setState({netHops:newNetHops});console.log(\"New state netHops: \"+JSON.stringify(this.state.netHops));break;case\"NEW-GRAPH\":console.log(\"dispatch NEW-GRAPH called!\");newGraphs=Object.assign({},this.state.graphs);newConfigs=Object.assign({},this.state.configs);graphKey=transaction.graphKey;configType=\"contacts\";configKey=graphKey+\".cg\";console.log(\"NEW-GRAPH key:\"+graphKey+\" configKey:\"+configKey);newConfigs[configKey]={\"id\":configKey,\"nodeKey\":graphKey,\"configType\":configType,\"cmdKeys\":[]};topVersion=selections.node_version[0];// get topmost node_version selection object\nlatestIonVer=Object.keys(topVersion)[0];// first item assumed to be latest version\nnewGraphs[graphKey]={\"id\":graphKey,\"name\":graphKey,\"desc\":\"\",\"ionVersion\":latestIonVer,\"configKey\":configKey};console.log(\"newGraph: \"+JSON.stringify(newGraphs[graphKey]));this.setState({graphs:newGraphs,configs:newConfigs});break;case\"UPDATE-GRAPH\":console.log(\"dispatch UPDATE-GRAPH called!\");newGraphs=Object.assign({},this.state.graphs);graphKey=transaction.graphKey;newGraphs[graphKey][\"desc\"]=transaction.desc;newGraphs[graphKey][\"ionVersion\"]=transaction.version;this.setState({graphs:newGraphs});break;case\"LOAD-NET-MODEL\":console.log(\"dispatch LOAD-NET-MODEL called!\");// a loaded net model initilizes these objects completely\nnewNetModel=transaction.netModel;newNetHosts=transaction.netHosts;newNetNodes=transaction.netNodes;newNetHops=transaction.netHops;console.log(\"newNetModel: \"+JSON.stringify(newNetModel));this.setState({loadNetModel:false,netModelActive:true,netModel:newNetModel,netHosts:newNetHosts,netNodes:newNetNodes,netHops:newNetHops});break;case\"NEW-NET-MODEL\":console.log(\"dispatch LOAD-NET-MODEL called!\");newNetModel=transaction.netModel;console.log(\"newNet:\"+JSON.stringify(newNetModel));this.setState({newNetModel:false,netModelActive:true,netModel:newNetModel});break;case\"NEW-ION-MODEL\":console.log(\"dispatch LOAD-ION-MODEL called!\");newIonModel=transaction.ionModel;console.log(\"newIon:\"+JSON.stringify(newIonModel));this.setState({newIonModel:false,ionModelActive:true,ionModel:newIonModel});break;case\"LOAD-ION-MODEL\":console.log(\"dispatch LOAD-ION-MODEL called!\");// a loaded ion model initilizes these objects completely\nnewIonModel=transaction.ionModel;newHosts=transaction.hosts;newIpAddrs=transaction.ipaddrs;newNodes=transaction.nodes;newGraphs=transaction.graphs;newConfigs=transaction.configs;newCommands=transaction.commands;newCloneVals=transaction.cloneValues;console.log(\"newIonModel: \"+JSON.stringify(newIonModel));this.setState({loadIonModel:false,ionModelActive:true,ionModel:newIonModel,hosts:newHosts,ipaddrs:newIpAddrs,graphs:newGraphs,nodes:newNodes,configs:newConfigs,commands:newCommands,cloneValues:newCloneVals});break;case\"UPDATE-ION-MODEL\":console.log(\"dispatch UPDATE-ION-MODEL called!\");newIonModel=transaction.ionModel;console.log(\"newIon:\"+JSON.stringify(newIonModel));this.setState({ionModel:newIonModel});break;default:console.log(\"dispatch action unknown!!\");break;}}//  HANDLERS --------\n},{key:\"loadIonModel\",value:function loadIonModel(){console.log(\"load ION model!\");this.setState({\"loadIonModel\":true});}},{key:\"noLoadIonModel\",value:function noLoadIonModel(){console.log(\"load ION model!\");this.setState({\"loadIonModel\":false});}},{key:\"newIonModel\",value:function newIonModel(){console.log(\"new ION model!\");this.setState({\"makeNewIonModel\":true});}},{key:\"noNewIonModel\",value:function noNewIonModel(){console.log(\"cancel add a new Ion Model!\");this.setState({makeNewIonModel:false});}},{key:\"loadNetModel\",value:function loadNetModel(){console.log(\"load Network model!\");this.setState({\"loadNetModel\":true});}},{key:\"noLoadNetModel\",value:function noLoadNetModel(){console.log(\"load Network model!\");this.setState({\"loadNetModel\":false});}},{key:\"newNetModel\",value:function newNetModel(){console.log(\"new Network model!\");this.setState({makeNewNetModel:true});}},{key:\"noNewNetModel\",value:function noNewNetModel(){console.log(\"cancel add a new Network Model!\");this.setState({makeNewNetModel:false});}},{key:\"render\",value:function render(){console.log(\"$$$$$$$$$$$$$$$ App render start\");//const modelBtnsElem  = this.state.ionModelActive?   \"\" : this.makeModelButtonsElem();\nvar modelBtnsElem=this.makeModelButtonsElem();var ionLoader=this.state.loadIonModel?this.makeIonModelLoaderElem():\"\";var ionModelElem=this.state.ionModelActive?this.makeIonModelElem():\"\";var netLoader=this.state.loadNetModel?this.makeNetModelLoaderElem():\"\";var netModelElem=this.state.netModelActive?this.makeNetModelElem():\"\";console.log(\"$$$$$$$$$$$$$$$ App render done\");var newIon=this.state.makeNewIonModel?this.makeNewIonElem():\"\";var newNet=this.state.makeNewNetModel?this.makeNewNetElem():\"\";return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{children:/*#__PURE__*/_jsx(\"h3\",{children:\"ION Configuration Editor  4.6.1\"})}),/*#__PURE__*/_jsxs(Grid,{fluid:true,children:[modelBtnsElem,/*#__PURE__*/_jsx(Row,{children:newNet}),/*#__PURE__*/_jsx(Row,{children:netLoader}),netModelElem,/*#__PURE__*/_jsx(Row,{children:newIon}),/*#__PURE__*/_jsx(Row,{children:ionLoader}),ionModelElem,/*#__PURE__*/_jsx(\"hr\",{})]})]});}}]);return App;}(React.Component);export{App as default};","map":{"version":3,"names":["React","IonModelLoader","NetModelLoader","IonModel","NetModel","Navbar","FormControl","Button","ButtonToolbar","Grid","Row","Col","Glyphicon","configTypes","cmdTypes","paramTypes","selections","uniqId","App","props","handleNewNet","e","val","target","value","console","log","newState","Object","assign","state","newNetModelName","setState","preventDefault","submitNewNet","netObj","tran","action","netModel","dispatch","makeNewNetModel","handleNewIon","newIonModelName","submitNewIon","ionObj","ionModel","makeNewIonModel","myConfigs","JSON","stringify","myCmds","myParams","mySelect","cloneValues","netNodes","netHosts","netHops","netAddrs","graphs","nodes","configs","commands","hosts","ipaddrs","window","onerror","msg","url","lineno","alert","cmdType","confType","configType","push","isCloned","conType","pType","cType","cmType","loadIonModel","ionModelActive","makeNewModelName","loadNetModel","newNetModel","netModelActive","nextId","cmdKey","cmd","configKey","config","nodeKey","cmds","values","cmdTypeKey","typeKey","name","indexOf","newNodeKey","newHostKey","hostKey","newHopKey","hopKey","myNodeKey","nodeNum","Number","ionNodeNum","protocol","hasOwnProperty","cloneVal","id","makeComboValue","suffix","type","combo","cloneVals","String","key","node","idx","configKeys","splice","cmdKeys","ipAddrKey","host","ipAddrKeys","optionItems","map","option","text","label","localNodeKey","matchType","typeVals","cloneNodeKey","sort","a","b","typeVal","unshift","paramId","sels","selection","keys","i","length","select","dimNetBtns","dimIonBtns","bind","newIonModel","getUniqId","makeCloneVal","findCloneVal","noLoadIonModel","desc","nextNodeNum","current","currentContacts","getNodeKey","isGoodName","usedNodeKey","isGoodNodeKey","isGoodNodeNum","getValues","makeOptElems","makeOptionElems","makeTypeOpts","makeTypeOptions","getOptText","getOptionText","noLoadNetModel","netElems","getIonModel","isGoodNetHostKey","isGoodNetNodeKey","isGoodNetHopKey","mapOptElems","mapOptionElems","isStandProt","isStandardProtocol","form","icon","noNewNetModel","noNewIonModel","cmdObj","tranTime","getCloneVal","newCloneVal","clones","clone","valIdx","clonedCmd","vals","updateCommand","cloneCmdType","updateClones","lastUpdate","getCmdType","copyClone","pickClone","paramTypeKey","paramType","valType","initValues","removeClone","addClone","cloneObj","transaction","now","Date","format","newNodes","newHosts","newIpAddrs","newNetHosts","newNetNodes","newNetHops","newGraphs","newConfigs","newCommands","newCloneVals","graphKey","ipAddr","initVals","numCmdKey","nodeCmdKey","nodeHost","nodeType","endpointID","services","switchCloneVal","cmdIsCloned","cloneType","getCmdCloneType","getCmdClonedValue","deleteCloneVals","removeCmdKey","cmdName","valCnt","paramCnt","order","getNodeNum","showDefault","defaultValue","cmdKeyList","next","cvKey","removeConfigKey","topVersion","node_version","latestIonVer","version","linefeed","hostCmdKey","index","removeIpAddrKey","ipAddrs","isIpAddr","wasIpAddr","hostAddrs","toNode","fromNode","bpLayer","ltpLayer","maxRate","symmetric","modelBtnsElem","makeModelButtonsElem","ionLoader","makeIonModelLoaderElem","ionModelElem","makeIonModelElem","netLoader","makeNetModelLoaderElem","netModelElem","makeNetModelElem","newIon","makeNewIonElem","newNet","makeNewNetElem","Component"],"sources":["/Users/rlborgen/git/ionconfig/editor/src/App.jsx"],"sourcesContent":["//        App.jsx     Main App JSX for IonConfig Tool\n//\n//        Copyright (c) 2018, California Institute of Technology.\n//        ALL RIGHTS RESERVED.  U.S. Government Sponsorship\n//        acknowledged.\n//                                                                   \n//      Author: Rick Borgen, Jet Propulsion Laboratory         \n//                                                               \nimport React from 'react';\n\n// custom component imports\nimport IonModelLoader from './IonModelLoader.jsx';\nimport NetModelLoader from './NetModelLoader.jsx';\nimport IonModel  from './IonModel.jsx';\nimport NetModel  from './NetModel.jsx';\n\n// 3rd-party component imports\nimport {Navbar} from 'react-bootstrap';\nimport {FormControl} from 'react-bootstrap';\nimport {Button,ButtonToolbar} from 'react-bootstrap';\nimport {Grid,Row,Col} from 'react-bootstrap';\nimport {Glyphicon} from 'react-bootstrap';\nimport \"date-format-lite\";\n\n// schema imports\nimport configTypes from './configTypes.json';\nimport cmdTypes    from './cmdTypes.json';\nimport paramTypes  from './paramTypes.json';\nimport selections  from './selections.json';\n\n // non-render state\n var uniqId = 0;       // counter used to make unique names\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(\"App ctor\");\n    var myConfigs = JSON.stringify(configTypes);\n    console.log('configTypes:' + myConfigs);\n    var myCmds = JSON.stringify(cmdTypes);\n    console.log('cmdTypes:' + myCmds);\n    var myParams = JSON.stringify(paramTypes);\n    console.log('paramTypes:' + myParams);\n    var mySelect = JSON.stringify(selections);\n    console.log('selections:' + mySelect);\n\n    var cloneValues = {};\n\n    // future state objects based on network model\n    var netNodes = {};\n    var netHosts = {};\n    var netHops  = {};\n    var netAddrs = [];\n\n    // future state objects based on ion model\n    var graphs = {};\n    var nodes = {};\n    var configs = {};\n    var commands = {};\n    var hosts = {};\n    var ipaddrs = {};\n\n    // catch errors and alert\n    window.onerror = function(msg,url,lineno) {\n      alert('Error message: '+msg+'\\nURL: '+url+'\\nLine Number: '+lineno)\n      return true\n    }\n\n    // assign cmdTypes list to each configType\n    for (var cmdType in cmdTypes) {\n      let confType = cmdTypes[cmdType].configType;\n      configTypes[confType].cmdTypes.push(cmdType);\n      let isCloned = cmdTypes[cmdType].isCloned;\n      if (isCloned) \n        console.log(\"*** cmdType: \" + cmdType + \" has a cloned property.\");\n    }\n    console.log(\"=== cmdTypes now mapped into configTypes.\");\n    for (var conType in configTypes) {\n      console.log(\"configType: \" + conType + \" has: \" + JSON.stringify(configTypes[conType].cmdTypes)); \n    }\n    // assign paramTypes list to each cmdType\n    for (var pType in paramTypes) {\n      console.log(\"ingest paramType: \" + pType);\n      let cType = paramTypes[pType].cmdType;\n      cmdTypes[cType].paramTypes.push(pType);\n    }\n    console.log(\"=== paramTypes now mapped into cmdTypes.\");\n    for (var cmType in cmdTypes) {\n      console.log(\"cmdType: \" + cmType + \" has: \" + JSON.stringify(cmdTypes[cmType].paramTypes)); \n    }\n     \n    // the master state atom\n    this.state = {\n       loadIonModel: false,\n       makeNewIonModel: false,\n       ionModelActive: false,\n       makeNewModelName: \"\",\n       loadNetModel: false,\n       makeNewNetModel: false,\n       newNetModel: false,\n       netModelActive: false,      \n       newNetModelName: \"\",   \n\n       netModel: null,             // netModel object\n       netNodes: netNodes,         // net model nodes\n       netHosts: netHosts,         // net model hosts\n       netHops: netHops,           // net model hops\n       netAddrs: netAddrs,         // net model ip addrs\n\n       ionModel: null,             // ionModel object\n       hosts: hosts,               // model\n       ipaddrs: ipaddrs,           // model\n       graphs: graphs,             // model\n       nodes: nodes,               // model\n       configs: configs,           // model\n       commands: commands,         // model\n\n       cloneValues: cloneValues    // derived\n    };\n  };\n  // generate next uniq id...used by all types\n  getUniqId() {\n     let nextId = uniqId + 1;\n     uniqId = nextId;\n     return nextId;\n  }\n  // get Ion Model handle\n  getIonModel() {\n     return this.state.ionModel;\n  }\n  // fetch the owning nodeKey of a command\n  getNodeKey(cmdKey) {\n     let cmd = this.state.commands[cmdKey];\n     let configKey = cmd.configKey;\n     let config = this.state.configs[configKey];\n     let nodeKey = config.nodeKey;\n     return nodeKey;\n  }\n  // fetch values for a cmdKey\n  getValues(cmdKey) {\n    //console.log(\"===getValues for cmd: \" + cmdKey);\n    let cmds = this.state.commands;\n    let cmd = cmds[cmdKey];\n    return cmd.values;\n  }\n  // fetch the cmdType object based on a command\n  getCmdType(cmdKey) {\n     let cmd = this.state.commands[cmdKey];\n     let cmdTypeKey = cmd.typeKey;\n     let cmdType = cmdTypes[cmdTypeKey];\n     return cmdType;\n  }\n  // check if a new name is valid\n  isGoodName(name) {\n  console.log(\"isGoodName ?? \" + name);\n    if (name === '')\n      return false;\n    if (name.indexOf(' ') >= 0)\n      return false;\n    return true;\n  }\n  // check if a new node name is valid\n  isGoodNodeKey(newNodeKey) {\n    console.log(\"isGoodNodeKey ?? \" + newNodeKey);\n    for (var nodeKey in this.state.nodes)\n       if (nodeKey === newNodeKey)\n         return false;\n    return true;\n  }\n  // check if a new node name is valid\n  isGoodNetNodeKey(newNodeKey) {\n    console.log(\"isGoodNetNodeKey ?? \" + newNodeKey);\n    for (var nodeKey in this.state.netNodes)\n       if (nodeKey === newNodeKey)\n         return false;\n    return true;\n  }\n  // check if a new net host name is valid\n  isGoodNetHostKey(newHostKey) {\n    console.log(\"isGoodNetHostKey ?? \" + newHostKey);\n    for (var hostKey in this.state.netHosts)\n       if (hostKey === newHostKey)\n         return false;\n    return true;\n  }\n  // check if a new net hop name is valid\n  isGoodNetHopKey(newHopKey) {\n    console.log(\"isGoodNetHopKey ?? \" + newHopKey);\n    for (var hopKey in this.state.netHops)\n       if (hopKey === newHopKey)\n         return false;\n    return true;\n  }\n  // check if a new nodeNum is valid\n  isGoodNodeNum(myNodeKey, nodeNum) {\n    console.log(\"isGoodNodeNum ?? \" + myNodeKey + ' ' + nodeNum);\n    for (var nodeKey in this.state.nodes) {\n      //console.log(\"checking node: \" + nodeKey);\n      if (Number(nodeNum) === Number(this.state.nodes[nodeKey].ionNodeNum) \n            && myNodeKey !== nodeKey )\n        return false;\n    }\n    return true;\n  }\n  //check if protocol has a standard ION CLI\n  isStandardProtocol(protocol) {\n    if (protocol === \"tcp\"  ||\n        protocol === \"stcp\" ||\n        protocol === \"udp\"  ||\n        protocol === \"dccp\" ||\n        protocol === \"bssp\" ||\n        protocol === \"ltp\") \n      return true;\n    else\n      return false;\n  }\n  // check if a candidate nodeKey exists\n  usedNodeKey(myNodeKey) {\n    console.log(\"usedNodeKey ?? \" + myNodeKey);\n    if (this.state.nodes.hasOwnProperty(myNodeKey))\n      return true;\n    return false;\n  }\n  // make a clone-able value object (or expression) based on special command types\n  makeCloneVal(nodeKey,cmd) {\n    var cloneVal = {};\n    // first assign properties not dependent on type\n    cloneVal[\"id\"] = cmd.id;\n    cloneVal[\"nodeKey\"] = nodeKey;\n    cloneVal[\"clones\"] = []     // a list for clone id objects (cmdKey & valIdx)\n    cloneVal[\"value\"] = this.makeComboValue(cmd,cmd.typeKey);\n    // then check specific type for other init rules\n    if (cmd.typeKey === \"node_nodenum\") {    /// special model command (not ion)\n      cloneVal[\"type\"] = \"nodeNum\";\n      cloneVal[\"label\"] = nodeKey;\n    } else\n    if (cmd.typeKey === \"node_nodekey\") {    /// special model command (not ion)\n      cloneVal[\"type\"] = \"nodeKey\";\n      cloneVal[\"label\"] = nodeKey;\n    } else\n    if (cmd.typeKey === \"host_hostkey\") {    /// special model command (not ion)\n      cloneVal[\"type\"] = \"hostKey\";\n      cloneVal[\"label\"] = 'Host:' + cmd.values[0];\n    } else\n    if (cmd.typeKey === \"host_ipaddr\") {         /// special model command (not ion)\n      cloneVal[\"type\"] = \"ipAddr\";\n      cloneVal[\"label\"] = 'Host: ' + nodeKey + ' IpAddr:' + cmd.values[0];\n    } else\n    if (cmd.typeKey === \"bpv6rc_endpoint\" ||\n        cmd.typeKey === \"bpv7rc_endpoint\") {\n      cloneVal[\"type\"] = \"ionEndpoint\";\n      // should annotate endpoint purpose in the the label\n      let suffix = '';\n      if (cmd.values[3] !== \"\")\n        suffix = ' [' + cmd.values[3] + ']';\n      cloneVal[\"label\"] = 'node:' + nodeKey + ' servNum:' + cmd.values[1] + suffix;\n    } else\n    if (cmd.typeKey === \"bpv6rc_induct_ltp\" ||\n        cmd.typeKey === \"bpv7rc_induct_ltp\") {\n      cloneVal[\"type\"] = \"ltpInduct\";\n      cloneVal[\"label\"] = 'toNode: ' + nodeKey + ' ltpInductName: ' + cloneVal.value;\n    } else\n    if (cmd.typeKey === \"bpv6rc_induct_udp\" ||\n        cmd.typeKey === \"bpv7rc_induct_udp\") {\n      cloneVal[\"type\"] = \"udpInduct\";\n      cloneVal[\"label\"] = 'toNode: ' + nodeKey + ' udpInductName: ' + cloneVal.value;\n    } else \n    if (cmd.typeKey === \"bpv6rc_induct_stcp\" ||\n        cmd.typeKey === \"bpv7rc_induct_stcp\") {\n      cloneVal[\"type\"] = \"stcpInduct\";\n      cloneVal[\"label\"] = 'toNode:' + nodeKey + ' stcpInductName: ' + cloneVal.value; \n    } else \n    if (cmd.typeKey === \"bpv6rc_induct_tcp\" ||\n        cmd.typeKey === \"bpv7rc_induct_tcp\") {\n      cloneVal[\"type\"] = \"tcpInduct\";\n      cloneVal[\"label\"] = 'toNode: ' + nodeKey + ' tcpInductName: ' + cloneVal.value;\n    } else \n    if (cmd.typeKey === \"bpv6rc_induct_dccp\" ||\n        cmd.typeKey === \"bpv7rc_induct_dccp\") {\n      cloneVal[\"type\"] = \"dccpInduct\";\n      cloneVal[\"label\"] = 'toNode: ' + nodeKey + ' dccpInductName: ' + cloneVal.value; \n    } else\n    if (cmd.typeKey === \"bpv6rc_induct_bssp\" ||\n        cmd.typeKey === \"bpv7rc_induct_bssp\") {\n      cloneVal[\"type\"] = \"bsspInduct\";\n      cloneVal[\"label\"] = 'toNode: ' + nodeKey + ' bsspInductName: ' + cloneVal.value;\n    } else \n    if (cmd.typeKey === \"bpv6rc_outduct_ltp\" ||\n        cmd.typeKey === \"bpv7rc_outduct_ltp\") {\n      cloneVal[\"type\"] = \"ltpOutduct\";\n      cloneVal[\"label\"] = 'fromNode: ' + nodeKey + ' ltpOutductName: ' + cloneVal.value;\n    } else\n    if (cmd.typeKey === \"bpv6rc_outduct_udp\" ||\n        cmd.typeKey === \"bpv7rc_outduct_udp\") {\n      cloneVal[\"type\"] = \"udpOutduct\";\n      cloneVal[\"label\"] = 'fromNode: ' + nodeKey + ' udpOutductName: ' + cloneVal.value;\n    } else \n    if (cmd.typeKey === \"bpv6rc_outduct_stcp\" ||\n        cmd.typeKey === \"bpv7rc_outduct_stcp\") {\n      cloneVal[\"type\"] = \"stcpOutduct\";\n      cloneVal[\"label\"] = 'fromNode:' + nodeKey + ' stcpOutductName: ' + cloneVal.value; \n    } else \n    if (cmd.typeKey === \"bpv6rc_outduct_tcp\" ||\n        cmd.typeKey === \"bpv7rc_outduct_tcp\") {\n      cloneVal[\"type\"] = \"tcpOutduct\";\n      cloneVal[\"label\"] = 'fromNode: ' + nodeKey + ' tcpOutductName: ' + cloneVal.value;\n    } else \n    if (cmd.typeKey === \"bpv6rc_outduct_dccp\" ||\n        cmd.typeKey === \"bpv7rc_outduct_dccp\") {\n      cloneVal[\"type\"] = \"dccpOutduct\";\n      cloneVal[\"label\"] = 'fromNode: ' + nodeKey + ' dccpOutductName: ' + cloneVal.value; \n    } else \n    if (cmd.typeKey === \"ltprc_start_udp\") {\n      cloneVal[\"type\"] = \"udpLink\";\n      cloneVal[\"label\"] = 'toNode: ' + nodeKey + ' udpLinkName: ' + cloneVal.value;\n    } else \n    if (cmd.typeKey === \"ltprc_start_dccp\") {\n      cloneVal[\"type\"] = \"dccpLink\";\n      cloneVal[\"label\"] = 'toNode: ' + nodeKey + ' dccpLinkName: ' + cloneVal.value;\n    } else\n    if (cmd.typeKey === \"bpv6rc_outduct_bssp\" ||\n        cmd.typeKey === \"bpv7rc_outduct_bssp\") {\n      cloneVal[\"type\"] = \"bsspOutduct\";\n      cloneVal[\"label\"] = 'fromNode: ' + nodeKey + ' bsspOutductName: ' + cloneVal.value;\n    } else {\n      console.log(\"!!! nodeKey: \" + nodeKey + \" is not clone type!! \");\n      return null;\n    }\n    console.log(\"$$$ new cloneVal = \" + JSON.stringify(cloneVal));\n    return cloneVal;\n  }\n  // make a combined value used for cloning (duct names, endpoints, etc.)\n  makeComboValue(cmd,type) {\n    console.log(\"$$$ makeComboVal = \" + type + ' ' + cmd.values[0]);\n    let combo = \"\";\n    if (type === \"node_nodenum\") \n      combo = cmd.values[0];\n    else if (type === \"node_nodekey\") \n      combo = cmd.values[0];\n    else if (type === \"host_hostkey\") \n      combo = cmd.values[0];\n    else if (type === \"host_ipaddr\") \n      combo = cmd.values[0];\n    else if (type === \"bpv6rc_endpoint\"\n          || type === \"bpv7rc_endpoint\")\n      combo = \"ipn:\" + cmd.values[0] + '.' + cmd.values[1];\n    else if (type === \"bpv6rc_induct_ltp\"\n          || type === \"bpv6rc_induct_bssp\"\n          || type === \"bpv7rc_induct_ltp\"\n          || type === \"bpv7rc_induct_bssp\")\n      combo = cmd.values[0];\n    else if (type === \"bpv6rc_induct_udp\"\n          || type === \"bpv6rc_induct_stcp\"\n          || type === \"bpv6rc_induct_tcp\"\n          || type === \"bpv6rc_induct_dccp\" \n          || type === \"bpv7rc_induct_tcp\"\n          || type === \"bpv7rc_induct_stcp\"\n          || type === \"bpv7rc_induct_tcp\"\n          || type === \"bpv7rc_induct_dccp\" )\n      combo = cmd.values[0] + ':' + cmd.values[1];\n    else if (type === \"bpv6rc_outduct_ltp\"\n          || type === \"bpv6rc_outduct_bssp\"\n          || type === \"bpv7rc_outduct_ltp\"\n          || type === \"bpv7rc_outduct_bssp\")\n      combo = cmd.values[0];\n    else if (type === \"bpv6rc_outduct_stcp\"\n          || type === \"bpv6rc_outduct_tcp\"\n          || type === \"bpv6rc_outduct_dccp\" \n          || type === \"bpv6rc_outduct_udp\"\n          || type === \"bpv7rc_outduct_stcp\"\n          || type === \"bpv7rc_outduct_tcp\"\n          || type === \"bpv7rc_outduct_dccp\" \n          || type === \"bpv7rc_outduct_udp\")\n      combo = cmd.values[0];\n    else if (type === \"ltprc_start_udp\"\n          || type === \"ltprc_start_dccp\" )\n      combo = cmd.values[0] + ':' + cmd.values[1];\n    return combo;\n  }\n  // find a cloneValue based on type & value\n  findCloneVal(cloneVals,type,value) {\n    if (value === '??')   // just a fake default value\n      return null;\n    let target = String(value);  // force string compare, avoid num issues\n    for (var key in cloneVals) {\n      let cloneVal = cloneVals[key];\n      //console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n      if (cloneVal.type === type && String(cloneVal.value) === target) \n        return cloneVal;\n    }\n    console.log (\"!!! failed to find cloneVal for type: \" + type + \"  value: \" + value);\n    return null;\n  }\n  // find any cloneValue based on type (defaults for new commands)\n  getAnyCloneVal(cloneVals,type) {\n    for (var key in cloneVals) {\n      let cloneVal = cloneVals[key];\n      //console.log(\"$$$ finding any cloneVal: \" + JSON.stringify(cloneVal));\n      if (cloneVal.type === type)\n        return cloneVal.value;\n    }\n    console.log (\"!!! found no cloneVal for type: \" + type);\n    return \"\";\n  }\n  // find a cloneValue based on type & value\n  getCloneVal(cloneVals,cmdKey) {\n    for (var key in cloneVals) {\n      let cloneVal = cloneVals[key];\n      //console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n      if (cloneVal.id === cmdKey) {\n        return cloneVal;\n      }\n    }\n    console.log (\"!!! failed to get cloneVal for cmdKey: \" + cmdKey);\n    return null;\n  }\n  // delete cloneVals for a deleted Command\n  deleteCloneVals(cloneVals,cmdKey) {\n    console.log (\"!!! deleting cloneVals for cmd: \" + cmdKey);\n    for (var key in cloneVals) {\n      let cloneVal = cloneVals[key];\n      if (cloneVal.id === cmdKey)\n        delete cloneVals[key];\n    }\n  }\n  //remove configKey from Node\n  removeConfigKey(nodes,nodeKey,configKey) {\n    console.log (\"!!! removing node configKey: \" + configKey);\n    let node = nodes[nodeKey];\n    let idx = node.configKeys.indexOf(configKey);\n    node.configKeys.splice(idx,1);\n  }\n  //remove cmdKey from Config\n  removeCmdKey(configs,configKey,cmdKey) {\n    console.log (\"!!! removing config cmdKey: \" + cmdKey);\n    let config = configs[configKey];\n    let idx = config.cmdKeys.indexOf(cmdKey);\n    config.cmdKeys.splice(idx,1);\n  }\n  //remove ipAddrKey from Host\n  removeIpAddrKey(hosts,hostKey,ipAddrKey) {\n    console.log (\"!!! removing ipAddrKey: \" + ipAddrKey);\n    let host = hosts[hostKey];\n    let idx = host.ipAddrKeys.indexOf(ipAddrKey);\n    host.ipAddrKeys.splice(idx,1);\n  }\n  // use list of value objects to build selector option elements\n  mapOptionElems(values) {\n    console.log(\"makeOptionElems \" + JSON.stringify(values))\n    var optionItems = values.map( \n      (val) => {\n        var option = val.value;\n        var text   = val.label;\n        return <option key={option} value={option}>{option}    == {text}</option>;\n      }\n    );\n    return optionItems;\n  }\n  // make a dynamic option selection based on one type of\n  // cloneVals\n  makeTypeOptions(type,localNodeKey,matchType) {\n    console.log(\"makeTypeOptions for type: \" + type + \" localNodeKey:\" + localNodeKey + \" matchType: \" + matchType);\n    // NOTE: matchType is with respect to local node key\n    //    \"match\"    must match local node key\n    //    \"exclude\"  must exclude local node key\n    //    \"all\"      match all nodes\n    let typeVals = [];\n    let cloneVals = this.state.cloneValues;\n    for (var cmdKey in cloneVals) {\n      let cloneVal = cloneVals[cmdKey];\n      let cloneNodeKey = cloneVal.nodeKey; \n      console.log(\"makeTypeOptions check \" + cmdKey + \" nodeKey: \" + cloneNodeKey);\n      // exclude local clones...want external clones only \n      if (matchType === \"exclude\" && cloneNodeKey === localNodeKey)  \n        continue;\n      // include only local clones\n      if (matchType === \"match\" && cloneNodeKey !== localNodeKey)  \n        continue;\n      if (cloneVal.type === type) \n        typeVals.push(cloneVal);\n    }\n    // sort values in ascending order\n    typeVals = typeVals.sort( function(a,b) {return (a.value > b.value) ? 1 : ((b.value > a.value) ? -1 : 0); } );\n    console.log(\"makeTypeOptions typeVals: \" + JSON.stringify(typeVals) );\n    var optionItems = typeVals.map( \n      (typeVal) => {\n        var option = typeVal.value;\n        var text = typeVal.label;\n        console.log(\"makeTypeOptions option= \" + option + \" text= \" + text);\n        return <option key={option} value={option}>{option}    == {text}</option>;\n      } \n    );\n    // the first item is not selectable, so this is a placeholder comment\n    optionItems.unshift(<option key=\"none\" value=\"none\">(Select)</option>);\n    return optionItems;\n  }\n  // make static options from selections json\n  makeOptionElems(paramId) {\n    console.log(\"makeOptionElems paramId: \" + paramId);\n    const sels = selections[paramId];\n    var optionItems = sels.map( \n      (selection,idx) => {\n        var option = Object.keys(selection)[0];   // get the first & only key\n        var text = selection[option];\n        return <option key={idx} value={option}>{option}    == {text}</option>;\n      } \n    );\n    optionItems.unshift(<option key=\"none\" value=\"none\">(Select)</option>);\n    return optionItems;\n  }\n  // get option's text from selections json\n  getOptionText(paramId,option) {\n    const sels = selections[paramId];\n    //console.log(\"getOptionText paramId:\" + paramId + \" option: \" + option);\n    for (var i = 0; i < sels.length; i++) {\n      var select = sels[i];\n      if(Object.keys(select)[0] === option) {\n        return select[option];\n      }\n    }\n    return \"\";\n  }\n  // make Model Load Buttons elem\n  makeModelButtonsElem() {\n    var dimNetBtns = false;\n    if (this.state.makeNewNetModel ||\n        this.state.loadNetModel)\n      dimNetBtns = true;\n    var dimIonBtns = false;\n    if (this.state.makeNewIonModel ||\n        this.state.loadIonModel)\n      dimIonBtns = true;\n  \treturn (\n  \t  <Row>\n        <Col className=\"text-right\" sm={2}><h4><b>Net Model File</b></h4></Col>\n        <Col sm={2}>\n          <ButtonToolbar>\n            <Button  bsSize=\"sm\" bsStyle=\"primary\" disabled={dimNetBtns} onClick={this.loadNetModel.bind(this)}>Load</Button>\n            <Button  bsSize=\"sm\" bsStyle=\"primary\" disabled={dimNetBtns} onClick={this.newNetModel.bind(this)}>New</Button>\n          </ButtonToolbar>\n        </Col>\n        <Col sm={2}>\n          <h4><b>...can initialize a new...</b></h4>\n        </Col>\n        <Col className=\"text-right\" sm={2}><h4><b>ION Model File</b></h4></Col>\n        <Col sm={2}>\n          <ButtonToolbar>\n            <Button  bsSize=\"sm\" bsStyle=\"primary\" disabled={dimIonBtns} onClick={this.loadIonModel.bind(this)}>Load</Button>\n            <Button  bsSize=\"sm\" bsStyle=\"primary\" disabled={dimIonBtns} onClick={this.newIonModel.bind(this)}>New</Button>\n          </ButtonToolbar>\n        </Col>\n      </Row>\n    );\n  }\n\n  // make Ion Model Loader element\n  makeIonModelLoaderElem() {\n  \tconsole.log(\"++++makeIonModelLoaderElem\");\n    const getUniqId = this.getUniqId.bind(this);\n\n    const makeCloneVal = this.makeCloneVal.bind(this);\n    const findCloneVal = this.findCloneVal.bind(this);\n    const noLoadIonModel = this.noLoadIonModel.bind(this);\n  \tconst dispatch = this.dispatch.bind(this);  // make sure dispatch remembers \"this\"\n  \treturn (\n      <IonModelLoader\n        key=\"ionmodel\" \n        getUniqId={getUniqId}           // function\n        makeCloneVal={makeCloneVal}     // function\n        findCloneVal={findCloneVal}     // function\n        noLoadIonModel={noLoadIonModel} // function\n        dispatch={dispatch}             // function\n      /> );\n  }\n  // build and return a IonModel element\n  makeIonModelElem() {\n    console.log(\"makeIonModelElem ionModel:\" +JSON.stringify(this.state.ionModel));\n    const name = this.state.ionModel.name;\n    const desc = this.state.ionModel.desc;\n    const nextNodeNum = this.state.ionModel.nextNodeNum;\n    const current = this.state.ionModel.currentContacts;\n    const graphs = this.state.graphs;\n    const hosts = this.state.hosts;\n    const ipaddrs = this.state.ipaddrs;\n    const nodes = this.state.nodes;\n    const configs = this.state.configs;\n    const commands = this.state.commands;\n    const cloneVals = this.state.cloneValues;\n\n    const getNodeKey = this.getNodeKey.bind(this);\n    const isGoodName = this.isGoodName.bind(this);\n    const usedNodeKey = this.usedNodeKey.bind(this);\n    const isGoodNodeKey = this.isGoodNodeKey.bind(this);\n    const isGoodNodeNum = this.isGoodNodeNum.bind(this);\n    const getValues = this.getValues.bind(this);\n    const makeOptElems = this.makeOptionElems.bind(this);\n    const makeTypeOpts = this.makeTypeOptions.bind(this); \n    const getOptText = this.getOptionText.bind(this);\n    const dispatch = this.dispatch.bind(this);  // make sure dispatch remembers \"this\"\n\n    return (\n      <IonModel\n        key={name}                // unique id\n\n        name={name}               // state\n        desc={desc}               // state\n        nextNodeNum={nextNodeNum} // state\n        currentContacts={current} // state\n        graphs={graphs}           // state\n        hosts={hosts}             // state\n        ipaddrs={ipaddrs}         // state\n        nodes={nodes}             // state\n        configs={configs}         // state\n        commands={commands}       // state\n        cloneValues={cloneVals}   // state\n\n        isGoodName={isGoodName}           // verify name string is valid\n        usedNodeKey={usedNodeKey}         // used as a node key?\n        isGoodNodeKey={isGoodNodeKey}     // verify nodeKey not in use\n        isGoodNodeNum={isGoodNodeNum}     // verify node num not in use\n        getNodeKey={getNodeKey}           // find nodeKey from cmdKey\n        getValues={getValues}             // get command value list\n        makeOptionElems={makeOptElems}    // options selector\n        makeTypeOptions={makeTypeOpts}    // make type options\n        getOptionText={getOptText}        // get opt text\n        dispatch={dispatch}               // dispatch func for new configs\n      />\n    );  \n  }\n  // make Net Model Loader element\n  makeNetModelLoaderElem() {\n    console.log(\"++++makeNetModelLoaderElem\");\n    const netAddrs=this.state.netAddrs  // state\n    const noLoadNetModel = this.noLoadNetModel.bind(this);\n    const dispatch = this.dispatch.bind(this);  // make sure dispatch remembers \"this\"\n    return (\n      <NetModelLoader\n        key=\"netmodel\" \n        netAddrs={netAddrs}             // state\n        noLoadNetModel={noLoadNetModel} // function\n        dispatch={dispatch}             // function\n      /> );\n  }\n  // build and return a NetModel element\n  makeNetModelElem(netElems) {\n    console.log(\"makeNetModelElem netModel:\" +JSON.stringify(this.state.netModel));\n    const name = this.state.netModel.name;\n    const desc = this.state.netModel.desc;\n    const netHosts = this.state.netHosts;\n    const netNodes = this.state.netNodes;\n    const netHops = this.state.netHops;\n    const netAddrs = this.state.netAddrs;\n    const getIonModel = this.getIonModel.bind(this);\n    const isGoodName = this.isGoodName.bind(this);\n    const isGoodNetHostKey = this.isGoodNetHostKey.bind(this);\n    const isGoodNetNodeKey = this.isGoodNetNodeKey.bind(this);\n    const isGoodNetHopKey = this.isGoodNetHopKey.bind(this);\n    const makeOptElems = this.makeOptionElems.bind(this);\n    const mapOptElems = this.mapOptionElems.bind(this);\n    const makeTypeOpts = this.makeTypeOptions.bind(this);\n    const getUniqId = this.getUniqId.bind(this);\n    const makeCloneVal = this.makeCloneVal.bind(this); \n    const findCloneVal = this.findCloneVal.bind(this); \n    const isStandProt = this.isStandardProtocol.bind(this);\n\n    const dispatch = this.dispatch.bind(this);  // make sure dispatch remembers \"this\"\n\n    return (\n      <NetModel\n        key={name}                // unique id\n\n        name={name}               // state\n        desc={desc}               // state\n        netHosts={netHosts}       // state\n        netNodes={netNodes}       // state\n        netHops={netHops}         // state\n        netAddrs={netAddrs}       // state\n  \n        getIonModel={getIonModel}            // get ion model handle\n        isGoodName={isGoodName}              // verify name string is valid\n        isGoodNetHostKey={isGoodNetHostKey}  // verify hostKey not in use\n        isGoodNetNodeKey={isGoodNetNodeKey}  // verify nodeKey not in use\n        isGoodNetHopKey={isGoodNetHopKey}    // verify hopKey not in use\n        dispatch={dispatch}                  // dispatch func for new configs\n        makeOptionElems={makeOptElems}       // make static options \n        mapOptionElems={mapOptElems}         // map options elems\n        makeTypeOptions={makeTypeOpts}       // make type options\n        getUniqId={getUniqId}                // function\n        makeCloneVal={makeCloneVal}          // function\n        findCloneVal={findCloneVal}          // function\n        isStandardProtocol={isStandProt}     // check protocol\n      />\n    );  \n  }\n  makeNewNetElem() {\n    console.log(\"makeNewNetElem\");\n    const id = this.state.newNetModelName;\n    var form =\n      <FormControl bsSize=\"sm\" type=\"text\" value={id} spellCheck=\"false\" onChange={this.handleNewNet}/>;\n    const icon = 'remove';\n    return (\n      <div>\n        <hr />\n        <Col className=\"text-right\" sm={2}><b>New Net Model Name:</b></Col>\n        <Col sm={1}>{form}</Col>\n        <Col sm={1}>(no spaces)</Col>\n        <Col sm={2}>\n          <ButtonToolbar>\n            <Button bsSize=\"sm\" bsStyle=\"primary\" onClick={this.submitNewNet}>Submit</Button>\n            <Button bsSize=\"sm\" bsStyle=\"success\" onClick={this.noNewNetModel.bind(this)}><Glyphicon glyph={icon} /></Button>\n          </ButtonToolbar>\n        </Col>\n      </div>\n    );\n  }\n  makeNewIonElem() {\n    console.log(\"makeNewIonElem\");\n    const id = this.state.newIonModelName;\n    var form =\n      <FormControl bsSize=\"sm\" type=\"text\" value={id} spellCheck=\"false\" onChange={this.handleNewIon}/>;\n    const icon = 'remove';\n    return (\n      <div>\n        <hr />\n        <Col className=\"text-right\" sm={2}><b>New ION Model Name:</b></Col>\n        <Col sm={1}>{form}</Col>\n        <Col sm={1}>(no spaces)</Col>\n        <Col sm={2}>\n          <ButtonToolbar>\n            <Button bsSize=\"sm\" bsStyle=\"primary\" onClick={this.submitNewIon}>Submit</Button>\n            <Button bsSize=\"sm\" bsStyle=\"success\" onClick={this.noNewIonModel.bind(this)}><Glyphicon glyph={icon} /></Button>\n          </ButtonToolbar>\n        </Col>\n      </div>\n    );\n  }\n  // upon any parameter UPDATE transaction\n  // check if a clone entry must be updated \n  //  ... and therfore cloning is needed \n  // (command value is already changed)\n  updateClones(cmds,cloneVals,nodeKey,cmdObj,tranTime) {\n    let cmdKey = cmdObj.id;\n    let cmdTypeKey = cmdObj.typeKey;\n    let isCloned = false;\n    if (cmdTypeKey === \"node_nodenum\")    // special model commands (non-ion)\n      isCloned = true;\n    else\n    if (cmdTypeKey === \"host_ipaddr\")    // special model commands (non-ion)\n      isCloned = true;\n    else {\n      let cmdType = cmdTypes[cmdTypeKey];\n      isCloned = cmdType.isCloned;\n    }\n    console.log(\"=== updateClones().  type: \" + cmdKey + \" isCloned: \" + isCloned);\n    if (isCloned) {\n      // the clone source is command-centric & presumes exactly one clone-able value is possible\n      //  ... that clone-able value may be complex, like endpoints or duct names\n      //  and complex values must be built from the full command value list\n\n      let cloneVal = this.getCloneVal(cloneVals,cmdKey);\n      if (cloneVal){\n        console.log(\"=== updating cloneVal.\");\n        let newCloneVal = this.makeCloneVal(nodeKey,cmdObj);  // build new cloneVal\n        newCloneVal.clones = cloneVal.clones;              //recapture clones list\n        cloneVal = newCloneVal;             // replace the cloneVal object\n        cloneVals[cmdKey] = newCloneVal;    // update the cloneVals array\n\n        // then update each dependent clone command\n        for (let i = 0; i < cloneVal.clones.length; i++) {\n          let clone = cloneVal.clones[i]\n          console.log(\"$$$updating clone cmd: \" + clone.cmdKey + \" value #:\" + clone.valIdx);\n          let clonedCmd = cmds[clone.cmdKey];\n          let vals = clonedCmd.values;\n          vals[clone.valIdx] = cloneVal.value;\n          this.updateCommand(cmds,clone.cmdKey,tranTime,vals);\n          // now check for recursive cloning!\n          let cloneCmdType = cmdTypes[clonedCmd.typeKey];\n          // now check if we just updated a clone-able command...causing a chain reaction\n          if (cloneCmdType.isCloned) {\n            this.updateClones(cmds,cloneVals,nodeKey,clonedCmd,tranTime);\n          }\n        }\n      }\n    }\n    // console.log(\"=== Review updated cloneVals. \");\n    //for (let key in cloneVals) {\n      //let cloneVal = cloneVals[key];\n      //console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n    //}\n    return null;\n  }\n  // function to update one command \n  //  (may be many from one transaction due to cloning)\n  updateCommand(cmds,cmdKey,tranTime,values) {\n    console.log(\"updating cmdKey:\" + cmdKey + \" to \" + JSON.stringify(values));\n    cmds[cmdKey].values = values;\n    cmds[cmdKey].lastUpdate = tranTime;\n    return null;\n  }\n  // check if this commmand has a cloned parameter\n  cmdIsCloned (cmdKey) {\n    const cmdType = this.getCmdType(cmdKey);\n    if (cmdType.copyClone || cmdType.pickClone)\n      return true;\n    return false;\n  }\n  getCmdCloneType (cmdKey) {\n    let cmdType = this.getCmdType(cmdKey);\n    for (let i = 0; i < cmdType.paramTypes.length; i++) {\n      let paramTypeKey = cmdType.paramTypes[i];\n      let paramType = paramTypes[paramTypeKey];\n      if (paramType.pickClone || paramType.copyClone)\n        return paramType.valType;\n    }\n    console.log(\"getCmdCloneType found none.\");\n    return \"\";\n  }\n  // get cloned value from parameter list\n  getCmdClonedValue (cmdKey) {\n    const cmd = this.state.commands[cmdKey];\n    let cmdType = this.getCmdType(cmdKey);\n    for (let i = 0; i < cmdType.paramTypes.length; i++) {\n      let paramTypeKey = cmdType.paramTypes[i];\n      let paramType = paramTypes[paramTypeKey];\n      if (paramType.pickClone || paramType.copyClone)\n        return cmd.values[i];\n    }\n    console.log(\"getCmdClonedValue found none.\");\n    return \"\";\n  }\n  // an update to a \"picked\" cloneValue requires updates to clone lists\n  switchCloneVal(cloneVals, cmdKey, values, initValues) {\n    console.log(\"switchCloneVals was:\" + JSON.stringify(initValues));\n    console.log(\"switchCloneVals  is:\" + JSON.stringify(values));\n    let cmdType = this.getCmdType(cmdKey);\n    for (let i = 0; i < cmdType.paramTypes.length; i++) {\n      let paramTypeKey = cmdType.paramTypes[i];\n      let paramType = paramTypes[paramTypeKey];\n      if (paramType.pickClone) {  // this might need a switch\n        if(values[i] !== initValues[i]) {\n          console.log(\"+++ switchCloneVals found value change for param:\" + i);\n          this.removeClone(cloneVals,cmdKey,paramType.valType,initValues[i]);\n          this.addClone(cloneVals,cmdKey,paramType.valType,values[i],i);\n        }\n      }\n    }\n    console.log(\"=== Review updated cloneVals.\");\n    //for (let key in cloneVals) {\n      //let cloneVal = cloneVals[key];\n      //console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n    //}\n    return null;\n  }\n  removeClone(cloneVals,cmdKey,type,value) {\n    console.log(\"removeClone cmdKey:\"+ cmdKey + \" type: \" + type + \" value: \" + value);\n    if (value === '??')   // just a fake default value\n      return null;\n    let cloneVal = this.findCloneVal(cloneVals,type,value);\n    if (cloneVal !== null) {\n      for (let i=0; i<cloneVal.clones.length; i++) {\n        let cloneObj = cloneVal.clones[i];\n        if (cmdKey === cloneObj.cmdKey) {\n          console.log(\"deleting clone entry no: \" + i);\n          cloneVal.clones.splice(i,1);\n          break;\n        }\n      }\n    }\n  }\n  addClone(cloneVals,cmdKey,type,value,valIdx) {\n    console.log(\"addClone cmdKey:\"+ cmdKey + \" type: \" + type + \" value: \" + value);\n    let cloneVal = this.findCloneVal(cloneVals,type,value);\n    if (cloneVal === null) {\n      console.log(\"!!! Failed to addClone for \" + cmdKey + \" value: \" + value);\n      return;\n    }\n    let clone = { \"cmdKey\" : cmdKey, \"valIdx\" : valIdx };\n    cloneVal.clones.push(clone);\n    console.log(\"$$$ checking add to  cloneVal: \" + JSON.stringify(cloneVal));\n  }\n  // special case of nodeNum clone\n  getNodeNum(nodeKey) {\n    console.log(\"getNodeNum nodeKey: \" + nodeKey);\n    let nodes = this.state.nodes;\n    let node = nodes[nodeKey];\n    return node.ionNodeNum;\n  }\n  setNodeNum(nodeKey,nodeNum) {\n    console.log(\"setNodeNum nodeKey: \" + nodeKey + \" nodeNum =\" + nodeNum);\n    let nodes = this.state.nodes;\n    let node = nodes[nodeKey];\n    node.ionNodeNum = nodeNum;\n    return null;\n  }\n  // all transactions are handled centrally with the combined state (REDUX-style)\n  dispatch(transaction) {\n    console.log(\"====dispatch called with transaction: \"+ JSON.stringify(transaction));\n    const now = new Date();\n    const tranTime = now.format(\"YYYY-MM-DDThh:mm\");\n    // containers for new state\n    var newIonModel;\n    var newNetModel; \n    var newNodes;\n    var newHosts;\n    var newIpAddrs;\n    var newNetHosts;\n    var newNetNodes;\n    var newNetHops;\n    var newGraphs;\n    var newConfigs;\n    var newCommands;\n    var newCloneVals;\n    var graphKey;\n    var nodeKey;\n    var hostKey;\n    var hopKey;\n    var ipAddr;\n    var configKey;\n    var cmdKey;\n    var cmdObj;\n    var cloneVal;\n    var cmdType;\n    var configType;\n    var desc;\n    var initVals;\n    var numCmdKey;\n    var nodeCmdKey;\n    var nodeHost;\n    var nodeType;\n    var endpointID;\n    var ipAddrKey;\n    var services;\n\n\n    switch(transaction.action) {\n      case \"UPDATE-COMMAND\":\n        console.log(\"dispatch UPDATE called!\");\n        newCommands = Object.assign( {}, this.state.commands);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        // first update primary command\n        nodeKey = transaction.nodeKey;\n        cmdKey = transaction.cmdKey;\n        cmdType = this.getCmdType(cmdKey);\n        console.log(\"UPDATE cmdType=\" + JSON.stringify(cmdType));\n        if (cmdType.pickClone) {  // could this command be choosing a different clone value?\n           //  a change of selection must notify the cloneVals\n          initVals = this.getValues(cmdKey);\n          console.log(\"+++ A better init vals??:\"+ JSON.stringify(initVals));\n          this.switchCloneVal(newCloneVals,cmdKey,transaction.values,transaction.initValues);\n        } \n        this.updateCommand(newCommands,cmdKey,tranTime,transaction.values);\n        // now look for cloning\n        cmdObj = newCommands[cmdKey];\n        this.updateClones(newCommands,newCloneVals,nodeKey,cmdObj,tranTime);\n        this.setState({ \n          \"commands\" : newCommands, \n          \"cloneValues\" : newCloneVals\n        });\n        console.log(\"new values of cmd: \" + cmdKey + \" are \" + JSON.stringify(this.state.commands[cmdKey].values));\n        console.log(\"new commands (all):\" + JSON.stringify(this.state.commands));\n        console.log(\"=== Review updated cloneVals.\");\n        let cloneVals = this.state.cloneValues;\n        for (let key in cloneVals) {\n          let cloneVal = cloneVals[key];\n          console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n        }\n        break;\n\n      case \"DELETE-COMMAND\":\n        console.log(\"dispatch DELETE-COMMAND called!\");\n        newConfigs = Object.assign( {}, this.state.configs); \n        newCommands = Object.assign( {}, this.state.commands);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        // first update primary command\n        nodeKey = transaction.nodeKey;\n        cmdKey = transaction.cmdKey;\n        configKey = transaction.configKey;\n        if (this.cmdIsCloned(cmdKey)) {\n          let cloneType = this.getCmdCloneType(cmdKey);\n          let cloneVal = this.getCmdClonedValue(cmdKey);\n          console.log(\"$$$ call removeClone \" + cmdKey + \" \" + cloneType + \" \" + cloneVal);\n          this.removeClone(newCloneVals,cmdKey,cloneType,cloneVal);\n        }\n        this.deleteCloneVals(newCloneVals,cmdKey);\n        this.removeCmdKey(newConfigs,configKey,cmdKey);\n        delete newCommands[cmdKey];\n        console.log(\"=== Review updated cloneVals. \");\n        for (let key in newCloneVals) {\n          let cloneVal = newCloneVals[key];\n          console.log(\"$$$ checking cloneVal: \" + JSON.stringify(cloneVal));\n        }\n        this.setState({ \n          \"commands\" : newCommands, \n          \"cloneValues\" : newCloneVals\n        });\n        break;\n\n      case \"NEW-COMMAND\":\n        console.log(\"dispatch NEW-COMMAND called!\");\n        console.log(\"NEW-COMMAND state.commands cnt: \" + Object.keys(this.state.commands).length);\n        newConfigs = Object.assign( {}, this.state.configs);        \n        newCommands = Object.assign( {}, this.state.commands);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        configKey = transaction.configKey;\n        const cmdTypeKey = transaction.cmdTypeKey;\n        nodeKey = transaction.nodeKey;\n        cmdType = cmdTypes[cmdTypeKey];\n        const cmdName = cmdType.name;\n        cmdKey = \"cmd_\" + this.getUniqId();\n        const valCnt = cmdType.paramCnt;\n        const order = cmdType.order;\n        const values = [];\n \n        for (var i=0; i<valCnt; i++) { \n          let paramTypeKey = cmdType.paramTypes[i];\n          let paramType = paramTypes[paramTypeKey];\n          console.log(\"NEW-COMMAND paramType: \" + JSON.stringify(paramType));\n          let copyClone = false;\n          let pickClone = false;\n          if (paramType.hasOwnProperty(\"copyClone\"))  // 1st check for existence\n            copyClone = paramType.copyClone;\n          if (paramType.hasOwnProperty(\"pickClone\"))  // 1st check for existence\n            pickClone = paramType.pickClone;\n          if (copyClone && paramType.valType === \"nodeNum\") {\n            let nodeNum = this.getNodeNum(nodeKey);\n            values.push(nodeNum);\n            this.addClone(newCloneVals,cmdKey,\"nodeNum\",nodeNum,i);\n          }\n          else if (copyClone && paramType.valType === \"nodeKey\") {\n            values.push(nodeKey);\n            this.addClone(newCloneVals,cmdKey,\"nodeKey\",nodeKey,i);\n          }\n          else if (pickClone) {\n            //let pickVal = this.getAnyCloneVal(newCloneVals,paramType.valType);\n            //values.push(pickVal);\n            values.push(\"??\");\n          }\n          else if (paramType.showDefault)\n            if (paramType.hasOwnProperty('defaultValue'))\n              values.push(paramType.defaultValue);\n            else\n              alert(\"No defaultValue provided for: \" + paramTypeKey);\n          else\n            values.push(\"\");\n        };\n        console.log(\"NEW-COMMAND old cmds cnt: \" + Object.keys(newCommands).length);\n        newCommands[cmdKey] = { \n            \"id\": cmdKey, \n            \"configKey\" : configKey,\n            \"typeKey\" : cmdTypeKey,\n            \"typeName\" : cmdName,\n            \"order\" : order,\n            \"lastUpdate\" : tranTime,\n            \"values\" : values\n        };\n        console.log(\"NEW-COMMAND new cmds cnt: \" + Object.keys(newCommands).length);\n        let cmdKeyList = newConfigs[configKey].cmdKeys;\n        let idx = 0;\n        for (idx = 0; idx < cmdKeyList.length; idx++) {\n          let cmdKey = cmdKeyList[idx];\n          let cmd = newCommands[cmdKey];\n          let next = cmd.order;\n          console.log(\"checking order: \" + order + \" vs. next: \" + next);\n          if (order < next)\n            break;\n        }\n        console.log(\"NEW-COMMAND splicing at: \" + idx);\n        cmdKeyList.splice(idx,0,cmdKey);\n        console.log(\"NEW-COMMAND cmdList: \" + JSON.stringify(cmdKeyList));\n        // if cloned, build object with clone-able value\n        // yes, even if required values are un-specified!\n        if (cmdType.isCloned) {\n          cloneVal = this.makeCloneVal(nodeKey,newCommands[cmdKey]);\n          var cvKey = cloneVal.id;\n          newCloneVals[cvKey] = cloneVal;\n        }\n        this.setState({ \n          \"configs\" : newConfigs,\n          \"commands\" : newCommands,\n          \"cloneValues\" : newCloneVals\n        });\n        console.log(\"new command idx: \" + idx + \"  command: \" + cmdName + \" params:\" + values);\n        break;\n\n      case \"NEW-CONFIG\":\n        console.log(\"dispatch NEW-CONFIG called!\");\n        newNodes = Object.assign( {}, this.state.nodes);\n        newConfigs = Object.assign( {}, this.state.configs);\n        nodeKey = transaction.nodeKey;\n        configType = transaction.configType;\n        configKey = nodeKey + \".\" + configType;\n        newConfigs[configKey] = {\n          \"id\" : configKey,\n          \"nodeKey\": nodeKey,\n          \"configType\" : configType,\n          \"cmdKeys\" : [] \n        };\n        newNodes[nodeKey].configKeys.push(configKey);\n        this.setState({ \n          nodes: newNodes,\n          configs: newConfigs\n        });\n        break;\n\n      case \"DELETE-CONFIG\":\n        console.log(\"dispatch DELETE-CONFIG called!\");\n        newNodes = Object.assign( {}, this.state.nodes);\n        newConfigs = Object.assign( {}, this.state.configs); \n        // first update primary command\n        nodeKey = transaction.nodeKey;\n        configKey = transaction.configKey;\n        this.removeConfigKey(newNodes,nodeKey,configKey);\n        delete newConfigs[configKey];\n        this.setState({ \n          \"nodes\" : newNodes, \n          \"configs\" : newConfigs\n        });\n        break;\n\n      case \"NEW-NODE\":\n        console.log(\"dispatch NEW-NODE called!\");\n        newIonModel  = Object.assign( {}, this.state.ionModel);\n        console.log(\"newionModel: \" + JSON.stringify(newIonModel));\n        newNodes = Object.assign( {}, this.state.nodes);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        nodeKey = transaction.nodeKey;\n        var nextNodeNum = +this.state.ionModel.nextNodeNum;\n        var topVersion = selections.node_version[0];    // get topmost node_version selection object\n        var latestIonVer = Object.keys(topVersion)[0];  // first item assumed to be latest version\n        while (!this.isGoodNodeNum(nodeKey,nextNodeNum))  // if not good, increment\n          nextNodeNum += 1;\n        // artificially create cloneVal for nodeNum  & nodeKey (not directly based on a on ion command)\n        numCmdKey = \"nodeNum_\" + nodeKey;\n        cmdObj = { \"id\": numCmdKey, \"typeKey\": \"node_nodenum\", \"values\":[nextNodeNum]}\n        cloneVal = this.makeCloneVal(nodeKey,cmdObj);\n        newCloneVals[numCmdKey] = cloneVal;\n        nodeCmdKey = \"node_\" + nodeKey;\n        cmdObj = { \"id\": nodeCmdKey, \"typeKey\": \"node_nodekey\", \"values\":[nodeKey]}\n        cloneVal = this.makeCloneVal(nodeKey,cmdObj);\n        newCloneVals[nodeCmdKey] = cloneVal;\n        console.log(\"New cloneVals: \" + JSON.stringify(newCloneVals));\n        newNodes[nodeKey] = {\n          \"id\" : nodeKey,\n          \"name\" : nodeKey, \n          \"ionNodeNum\" : nextNodeNum,\n          \"ionVersion\" : latestIonVer,\n          \"hostKey\" : \"\",\n          \"configKeys\" : []\n        };\n        nextNodeNum += 1;\n        newIonModel.nextNodeNum = nextNodeNum;\n        this.setState({ \n          ionModel: newIonModel,\n          nodes: newNodes,\n          cloneValues: newCloneVals\n        });\n        console.log(\"New state cloneValues: \" + JSON.stringify(this.state.cloneValues));\n        break;\n\n      case \"UPDATE-NODE\":\n        console.log(\"dispatch UPDATE-NODE called!\");\n        newNodes = Object.assign( {}, this.state.nodes);\n        newCommands = Object.assign( {}, this.state.commands);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        nodeKey = transaction.nodeKey;\n        newNodes[nodeKey][\"longName\"] = transaction.desc;\n        newNodes[nodeKey][\"ionNodeNum\"] = transaction.nodeNum;\n        newNodes[nodeKey][\"ionVersion\"] = transaction.version;\n        newNodes[nodeKey][\"hostKey\"] = transaction.hostKey;\n        numCmdKey = \"nodeNum_\" + nodeKey;\n        cmdObj = { \"id\": numCmdKey, \"typeKey\": \"node_nodenum\", \"values\":[transaction.nodeNum]}\n        this.updateClones(newCommands,newCloneVals,nodeKey,cmdObj,tranTime);\n        console.log(\"$$$ updated clones for:\" + transaction.nodeNum);\n        this.setState({ \n          nodes: newNodes,\n          commands: newCommands,\n          cloneValues: newCloneVals\n        });\n        break;\n\n      case \"NEW-HOST\":\n        console.log(\"dispatch NEW-HOST called!\");\n        newHosts = Object.assign( {}, this.state.hosts);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        hostKey = transaction.hostKey;\n        newHosts[hostKey] = {\n          id: hostKey,\n          desc: \"\",          // default\n          linefeed: \"unix\",  // default\n          ipAddrKeys: []\n        };\n        // create new clone value\n        var hostCmdKey = \"host_\" + hostKey;\n        cmdObj = { \"id\": hostCmdKey, \"typeKey\": \"host_hostkey\", \"values\":[hostKey] };\n        cloneVal = this.makeCloneVal(\"network\",cmdObj);\n        newCloneVals[hostCmdKey] = cloneVal;\n        this.setState({ \n          hosts: newHosts,\n          cloneValues: newCloneVals\n        });\n        console.log(\"New state cloneValues: \" + JSON.stringify(newCloneVals));\n        console.log(\"New state hosts: \" + JSON.stringify(newHosts));\n        break;\n\n      case \"UPDATE-HOST\":\n        console.log(\"dispatch UPDATE-HOST called!\");\n        newHosts = Object.assign( {}, this.state.hosts);\n        hostKey = transaction.hostKey;\n        newHosts[hostKey][\"desc\"] = transaction.desc;\n        newHosts[hostKey][\"linefeed\"] = transaction.linefeed;\n        // ipAddrs are created/edited/deleted separately\n        // no affect on clone values\n        this.setState({ \n          hosts: newHosts\n        });\n        break;\n\n      case \"NEW-IPADDR\":\n        console.log(\"dispatch NEW-IPADDR called!\");\n        newHosts = Object.assign( {}, this.state.hosts);\n        newIpAddrs = Object.assign( {}, this.state.ipaddrs);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        hostKey = transaction.hostKey;\n        ipAddr = transaction.ipAddr;\n\n        // set up clone value\n        ipAddrKey = \"ipAddr_\" + this.getUniqId();\n        cmdObj = { \"id\": ipAddrKey, \"typeKey\": \"host_ipaddr\", \"values\":[ipAddr] };\n        cloneVal = this.makeCloneVal(hostKey,cmdObj);\n        newCloneVals[ipAddrKey] = cloneVal;\n\n        newHosts[hostKey].ipAddrKeys.push(ipAddrKey);\n        newIpAddrs[ipAddrKey] = {\n          \"id\" : ipAddrKey,\n          \"hostKey\" : hostKey,\n          \"ipAddr\" : ipAddr\n        }\n        this.setState({ \n          hosts: newHosts,\n          ipaddrs: newIpAddrs,\n          cloneValues: newCloneVals\n        });\n        console.log(\"New state cloneValues: \" + JSON.stringify(newCloneVals));\n        console.log(\"New state hosts: \" + JSON.stringify(newHosts));\n        console.log(\"New state ipaddrs: \" + JSON.stringify(newIpAddrs));\n        break;\n\n      case \"CHANGE-IPADDR\":\n        console.log(\"dispatch CHANGE-IPADDR called!  host: \" + transaction.hostKey + \" addr: \" + transaction.ipAddr);\n        // nothing will change in Hosts...the ipAddrKey is unchanged\n        newCommands = Object.assign( {}, this.state.commands);   // cloning might change commands\n        newIpAddrs = Object.assign( {}, this.state.ipaddrs);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        hostKey = transaction.hostKey;\n        ipAddrKey = transaction.ipAddrKey;\n        ipAddr = transaction.ipAddr;  \n        newIpAddrs[ipAddrKey].ipAddr = ipAddr;  // update state object\n        // update cloneVals and clones\n        cmdObj = { \"id\": ipAddrKey, \"typeKey\": \"host_ipaddr\", \"values\":[ ipAddr ] };\n        this.updateClones(newCommands,newCloneVals,hostKey,cmdObj,tranTime);\n\n        this.setState({ \n          ipaddrs: newIpAddrs,\n          commands: newCommands,\n          cloneValues: newCloneVals\n        });\n        console.log(\"New state cloneValues: \" + JSON.stringify(newCloneVals));\n        console.log(\"New state hosts: \" + JSON.stringify(newIpAddrs));\n        break;\n\n      case \"DELETE-IPADDR\":\n        console.log(\"dispatch DELETE-IPADDR called!\" + transaction.index + \" \" + transaction.ipAddr);\n        newHosts = Object.assign( {}, this.state.hosts);\n        newIpAddrs = Object.assign( {}, this.state.ipaddrs);\n        newCloneVals = Object.assign( {}, this.state.cloneValues);\n        hostKey = transaction.hostKey;\n        ipAddrKey = transaction.ipAddrKey;\n        this.removeIpAddrKey(newHosts,hostKey,ipAddrKey);\n        delete newIpAddrs[ipAddrKey];\n        this.deleteCloneVals(newCloneVals,ipAddrKey);\n        this.setState({ \n          hosts: newHosts,\n          ipaddrs: newIpAddrs,\n          cloneValues: newCloneVals\n        });\n        console.log(\"New state cloneValues: \" + JSON.stringify(newCloneVals));\n        console.log(\"New state hosts: \" + JSON.stringify(newHosts));\n        break;\n\n      case \"NEW-NET-HOST\":\n        console.log(\"dispatch NEW-NET-HOST called! \" + transaction.hostKey);\n        newNetHosts = Object.assign( {}, this.state.netHosts);\n        hostKey = transaction.hostKey;\n        newNetHosts[hostKey] = {\n          \"id\" : hostKey,\n          \"hostDesc\" : \"\",\n          \"ipAddrs\" : []\n        };\n        this.setState({ \n          netHosts: newNetHosts\n        });\n        console.log(\"New state netHosts: \" + JSON.stringify(this.state.netHosts));\n        break;\n\n      case \"UPDATE-NET-HOST\":\n        console.log(\"dispatch UPDATE-NET-HOST called!\");\n        newNetHosts = Object.assign( {}, this.state.netHosts);\n        hostKey = transaction.hostKey;\n        newIpAddrs = newNetHosts[hostKey].ipAddrs   // just carry old addrs over\n        newNetHosts[hostKey] = {\n          \"id\" : hostKey,\n          \"hostDesc\": transaction.desc,\n          \"ipAddrs\" : newIpAddrs\n        };\n        this.setState({ \n          netHosts: newNetHosts\n        });\n        console.log(\"New state netHosts: \" + JSON.stringify(newNetHosts));\n        break;\n\n      case \"DELETE-NET-HOST\":\n        hostKey = transaction.hostKey;\n        console.log(\"dispatch DELETE-NET-HOST called! \" + hostKey);\n        newNetHosts = Object.assign( {}, this.state.netHosts);\n        delete newNetHosts[hostKey];\n        this.setState({ \n          netHosts: newNetHosts\n        });\n        console.log(\"New state netHosts: \" + JSON.stringify(this.state.netHosts));\n        break;\n\n      case \"NEW-NETADDR\":\n        console.log(\"dispatch NEW-NETADDR called!\"+ transaction.hostKey + \" addr: \" + transaction.ipAddr);\n        newHosts = Object.assign( {}, this.state.netHosts);\n        newIpAddrs = this.state.netAddrs;\n        hostKey = transaction.hostKey;\n        ipAddr = transaction.ipAddr;\n\n        newIpAddrs.push(ipAddr);\n        newHosts[hostKey].ipAddrs.push(ipAddr);\n  \n        this.setState({ \n          netHosts: newHosts,\n          netAddrs: newIpAddrs,\n        });\n        console.log(\"New state net hosts: \" + JSON.stringify(newHosts));\n        console.log(\"New state net ipaddrs: \" + JSON.stringify(newIpAddrs));\n        break;\n\n      case \"CHANGE-NETADDR\":\n        console.log(\"dispatch CHANGE-NETADDR called!  host: \" + transaction.hostKey + \" addr: \" + transaction.isIpAddr);\n        newHosts = Object.assign( {}, this.state.netHosts);\n        newIpAddrs = this.state.netAddrs;\n        hostKey = transaction.hostKey;\n        var isIpAddr = transaction.isIpAddr;\n        var wasIpAddr = transaction.wasIpAddr;\n        var hostAddrs = newHosts[hostKey].ipAddrs;\n        for (i=0; i<newIpAddrs.length; i++) \n          if (newIpAddrs[i] === wasIpAddr) {\n            newIpAddrs[i] = isIpAddr;\n            break;\n          }\n        for (i=0; i<hostAddrs.length; i++) \n          if (hostAddrs[i] === wasIpAddr) {\n            hostAddrs[i] = isIpAddr;\n            break;\n          }\n\n        this.setState({ \n          netHosts: newHosts,\n          netAddrs: newIpAddrs\n        });\n        console.log(\"New state net hosts: \" + JSON.stringify(newHosts));\n        console.log(\"New state net addrs: \" + JSON.stringify(newIpAddrs));\n        break;\n\n      case \"DELETE-NETADDR\":\n        console.log(\"dispatch DELETE-NETADDR called! \" + transaction.hostKey + \" \" + transaction.ipAddr);\n        newHosts = Object.assign( {}, this.state.netHosts);\n        newIpAddrs = this.state.netAddrs;\n        hostKey = transaction.hostKey;\n        ipAddr = transaction.ipAddr;\n        for (i=0; i<newIpAddrs.length; i++) \n          if (newIpAddrs[i] === ipAddr) {\n            newIpAddrs.splice(i,1);\n            break;\n          }\n        hostAddrs = newHosts[hostKey].ipAddrs;\n        for (i=0; i<hostAddrs.length; i++) \n          if (hostAddrs[i] === ipAddr) {\n            hostAddrs.splice(i,1);\n            newHosts[hostKey].ipAddrs = hostAddrs;\n            break;\n          }\n        this.setState({ \n          netHosts: newHosts,\n          netAddrs: newIpAddrs,\n        });\n        console.log(\"New state net hosts: \" + JSON.stringify(newHosts));\n        console.log(\"New state net addrs: \" + JSON.stringify(newIpAddrs));\n        break;\n\n      case \"NEW-NET-NODE\":\n        console.log(\"dispatch NEW-NET-NODE called! \" + transaction.nodeKey);\n        newNetNodes = Object.assign( {}, this.state.netNodes);\n        nodeKey = transaction.nodeKey;\n        newNetNodes[nodeKey] = {\n          \"id\" : nodeKey,\n          \"nodeDesc\": \"\",\n          \"nodeHost\": \"\",\n          \"nodeType\"  : \"\",\n          \"endpointID\" : \"\",\n          \"services\" : []\n        };\n        this.setState({ \n          netNodes: newNetNodes\n        });\n        console.log(\"New state netNodes: \" + JSON.stringify(this.state.netNodes));\n        break;\n\n      case \"UPDATE-NET-NODE\":\n        console.log(\"dispatch UPDATE-NET-NODE called!\");\n        newNetNodes = Object.assign( {}, this.state.netNodes);\n        nodeKey = transaction.nodeKey;\n        desc = transaction.desc;\n        nodeHost = transaction.nodeHost;\n        nodeType = transaction.nodeType;\n        endpointID = transaction.endpointID;\n        services = transaction.services;\n        newNetNodes[nodeKey] = {\n          \"id\" : nodeKey,\n          \"nodeDesc\" : desc,\n          \"nodeHost\"  : nodeHost,\n          \"nodeType\"  : nodeType,\n          \"endpointID\" : endpointID,\n          \"services\" : services\n        };\n        this.setState({ \n          netNodes: newNetNodes\n        });\n        break;\n\n      case \"DELETE-NET-NODE\":\n        nodeKey = transaction.nodeKey;\n        console.log(\"dispatch DELETE-NET-NODE called! \" + nodeKey);\n        newNetNodes = Object.assign( {}, this.state.netNodes);\n        delete newNetNodes[nodeKey];\n        this.setState({ \n          netNodes: newNetNodes\n        });\n        console.log(\"New state netNodes: \" + JSON.stringify(this.state.netNodes));\n        break;\n\n      case \"NEW-NET-HOP\":\n        console.log(\"dispatch NEW-NET-HOP called! \" + transaction.hopKey);\n        newNetHops = Object.assign( {}, this.state.netHops);\n        hopKey = transaction.hopKey;\n        newNetHops[hopKey] = {\n          \"id\" : hopKey,\n          \"hopDesc\": \"\",\n          \"toNode\": \"\",\n          \"fromNode\": \"\",\n          \"bpLayer\" : \"\",\n          \"ltpLayer\" : \"\",\n          \"maxRate\" : 0,\n          \"symmetric\" : false\n        };\n        this.setState({ \n          netHops: newNetHops\n        });\n        console.log(\"New state netHops: \" + JSON.stringify(this.state.netHops));\n        break;\n\n      case \"UPDATE-NET-HOP\":\n        console.log(\"dispatch UPDATE-NET-HOP called!\");\n        newNetHops = Object.assign( {}, this.state.netHops);\n        hopKey = transaction.hopKey;\n        newNetHops[hopKey] = {\n          \"id\" : hopKey,\n          \"hopDesc\": transaction.desc,\n          \"toNode\": transaction.toNode,\n          \"fromNode\": transaction.fromNode,\n          \"bpLayer\" : transaction.bpLayer,\n          \"ltpLayer\" : transaction.ltpLayer,\n          \"maxRate\" : transaction.maxRate,\n          \"symmetric\" : transaction.symmetric\n        };\n        this.setState({ \n          netHops: newNetHops\n        });\n        break;\n\n      case \"DELETE-NET-HOP\":\n        hopKey = transaction.hopKey;\n        console.log(\"dispatch DELETE-NET-HOP called! \" + hopKey);\n        newNetHops = Object.assign( {}, this.state.netHops);\n        delete newNetHops[hopKey];\n        this.setState({ \n          netHops: newNetHops\n        });\n        console.log(\"New state netHops: \" + JSON.stringify(this.state.netHops));\n        break;\n\n      case \"NEW-GRAPH\":\n        console.log(\"dispatch NEW-GRAPH called!\");\n        newGraphs = Object.assign( {}, this.state.graphs);\n        newConfigs = Object.assign( {}, this.state.configs);\n        graphKey = transaction.graphKey;\n        configType = \"contacts\";\n        configKey = graphKey + \".cg\";\n        console.log(\"NEW-GRAPH key:\" + graphKey + \" configKey:\" + configKey);\n        newConfigs[configKey] = {\n          \"id\" : configKey,\n          \"nodeKey\": graphKey,\n          \"configType\" : configType,\n          \"cmdKeys\" : [] \n        };\n        topVersion = selections.node_version[0];    // get topmost node_version selection object\n        latestIonVer = Object.keys(topVersion)[0];  // first item assumed to be latest version\n        newGraphs[graphKey] = {\n          \"id\" : graphKey,\n          \"name\" : graphKey, \n          \"desc\" : \"\",\n          \"ionVersion\" : latestIonVer,\n          \"configKey\" : configKey\n        };\n        console.log(\"newGraph: \" + JSON.stringify(newGraphs[graphKey]) );\n        this.setState({ \n          graphs: newGraphs,\n          configs: newConfigs\n        });\n        break;\n\n      case \"UPDATE-GRAPH\":\n        console.log(\"dispatch UPDATE-GRAPH called!\");\n        newGraphs = Object.assign( {}, this.state.graphs);\n        graphKey = transaction.graphKey;\n        newGraphs[graphKey][\"desc\"] = transaction.desc;\n        newGraphs[graphKey][\"ionVersion\"] = transaction.version;\n        this.setState({ \n          graphs: newGraphs\n        });\n        break;\n\n      case \"LOAD-NET-MODEL\":\n        console.log(\"dispatch LOAD-NET-MODEL called!\");\n        // a loaded net model initilizes these objects completely\n        newNetModel = transaction.netModel;\n        newNetHosts = transaction.netHosts;\n        newNetNodes = transaction.netNodes;\n        newNetHops = transaction.netHops;  \n        console.log(\"newNetModel: \" + JSON.stringify(newNetModel));\n        this.setState ({\n          loadNetModel: false,\n          netModelActive: true,\n          netModel: newNetModel,\n          netHosts: newNetHosts,\n          netNodes: newNetNodes,\n          netHops: newNetHops\n        });\n        break;\n\n      case \"NEW-NET-MODEL\":\n        console.log(\"dispatch LOAD-NET-MODEL called!\");\n        newNetModel = transaction.netModel;\n        console.log(\"newNet:\" + JSON.stringify(newNetModel));\n        this.setState ({\n          newNetModel: false,\n          netModelActive: true,\n          netModel: newNetModel,\n        });\n        break;\n\n      case \"NEW-ION-MODEL\":\n        console.log(\"dispatch LOAD-ION-MODEL called!\");\n        newIonModel = transaction.ionModel;\n        console.log(\"newIon:\" + JSON.stringify(newIonModel));\n        this.setState ({\n          newIonModel: false,\n          ionModelActive: true,\n          ionModel: newIonModel,\n        });\n        break;\n\n      case \"LOAD-ION-MODEL\":\n        console.log(\"dispatch LOAD-ION-MODEL called!\");\n        // a loaded ion model initilizes these objects completely\n        newIonModel = transaction.ionModel;\n        newHosts = transaction.hosts;\n        newIpAddrs = transaction.ipaddrs;\n        newNodes = transaction.nodes;\n        newGraphs = transaction.graphs;  \n        newConfigs = transaction.configs;     \n        newCommands = transaction.commands;\n        newCloneVals = transaction.cloneValues;\n        console.log(\"newIonModel: \" + JSON.stringify(newIonModel));\n        this.setState ({\n          loadIonModel: false,\n          ionModelActive: true,\n          ionModel: newIonModel,\n          hosts: newHosts,\n          ipaddrs: newIpAddrs,\n          graphs: newGraphs,\n          nodes: newNodes,\n          configs: newConfigs,\n          commands: newCommands,\n          cloneValues: newCloneVals\n        });\n        break;\n\n      case \"UPDATE-ION-MODEL\":\n        console.log(\"dispatch UPDATE-ION-MODEL called!\");\n        newIonModel = transaction.ionModel;\n        console.log(\"newIon:\" + JSON.stringify(newIonModel));\n        this.setState ({\n          ionModel: newIonModel,\n        });\n        break;\n\n      default:\n        console.log(\"dispatch action unknown!!\");\n        break;\n    }\n  }\n  //  HANDLERS --------\n  loadIonModel() {\n    console.log(\"load ION model!\");\n    this.setState ({ \n      \"loadIonModel\": true\n    });\n  };\n  noLoadIonModel() {\n    console.log(\"load ION model!\");\n    this.setState ({ \n      \"loadIonModel\": false\n    });\n  };\n  newIonModel() {\n    console.log(\"new ION model!\");\n    this.setState ({ \n      \"makeNewIonModel\": true\n    });\n  };\n  noNewIonModel() {\n    console.log(\"cancel add a new Ion Model!\");\n    this.setState({\n      makeNewIonModel: false\n    });\n  };\n\n  loadNetModel() {\n    console.log(\"load Network model!\");\n    this.setState ({ \n      \"loadNetModel\": true\n    });\n  };\n  noLoadNetModel() {\n    console.log(\"load Network model!\");\n    this.setState ({ \n      \"loadNetModel\": false\n    });\n  };\n  newNetModel() {\n    console.log(\"new Network model!\");\n    this.setState ({ \n      makeNewNetModel: true\n    });\n  };\n  noNewNetModel() {\n    console.log(\"cancel add a new Network Model!\");\n    this.setState({\n      makeNewNetModel: false\n    });\n  };\n\n  render() {\n    console.log(\"$$$$$$$$$$$$$$$ App render start\");\n    //const modelBtnsElem  = this.state.ionModelActive?   \"\" : this.makeModelButtonsElem();\n    const modelBtnsElem  = this.makeModelButtonsElem();\n    const ionLoader = this.state.loadIonModel?          this.makeIonModelLoaderElem() : \"\";\n    const ionModelElem  = this.state.ionModelActive?    this.makeIonModelElem() : \"\";\n    const netLoader = this.state.loadNetModel?          this.makeNetModelLoaderElem() : \"\";\n    const netModelElem  = this.state.netModelActive?    this.makeNetModelElem() : \"\";\n\n    console.log(\"$$$$$$$$$$$$$$$ App render done\");\n    const newIon = this.state.makeNewIonModel? this.makeNewIonElem() : \"\";\n    const newNet = this.state.makeNewNetModel? this.makeNewNetElem() : \"\";\n    \n    return (\n      <div>\n        <Navbar>\n          <h3>ION Configuration Editor  4.6.1</h3>\n        </Navbar>\n        <Grid fluid>\n          {modelBtnsElem}\n          <Row>{newNet}</Row>\n          <Row>{netLoader}</Row>\n          {netModelElem}\n          <Row>{newIon}</Row>\n          <Row>{ionLoader}</Row>\n          {ionModelElem}\n          <hr />\n        </Grid>\n      </div>\n    );\n  };\n  handleNewNet =(e) => {\n    const val = e.target.value;\n    console.log(\"a new network model name! \" + val);\n    var newState = Object.assign({},this.state);\n    newState.newNetModelName = val;\n    this.setState (newState);\n    e.preventDefault();\n  };\n  submitNewNet = () => {\n    console.log(\"a new network model tran submitted!\");\n    const val = this.state.newNetModelName;\n    var netObj = { \"name\": val, \"desc\": \"\" };\n    const tran = {\n      action: \"NEW-NET-MODEL\",\n      netModel: netObj\n    };\n    this.dispatch(tran);\n    this.setState({\n      makeNewNetModel: false\n    });\n  };\n  handleNewIon =(e) => {\n    const val = e.target.value;\n    console.log(\"a new ion model name! \" + val);\n    var newState = Object.assign({},this.state);\n    newState.newIonModelName = val;\n    this.setState (newState);\n    e.preventDefault();\n  };\n  submitNewIon = () => {\n    console.log(\"a new ion model tran submitted!\");\n    const val = this.state.newIonModelName;\n    var ionObj = { \"name\": val, \"desc\": \"\", \"nextNodeNum\": 1 };\n    const tran = {\n      action: \"NEW-ION-MODEL\",\n      ionModel: ionObj\n    };\n    this.dispatch(tran);\n    this.setState({\n      makeNewIonModel: false\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}