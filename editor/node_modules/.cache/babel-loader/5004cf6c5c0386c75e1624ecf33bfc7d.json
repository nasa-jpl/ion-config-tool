{"ast":null,"code":"// TODO: This module should be ElementChildren, and should use named exports.\nimport React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid components\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @return {object} Object containing the ordered map of results.\n */\n\nfunction map(children, func, context) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    return func.call(context, child, index++);\n  });\n}\n/**\n * Iterates through children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for context.\n */\n\n\nfunction forEach(children, func, context) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    func.call(context, child, index++);\n  });\n}\n/**\n * Count the number of \"valid components\" in the Children container.\n *\n * @param {?*} children Children tree container.\n * @returns {number}\n */\n\n\nfunction count(children) {\n  var result = 0;\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    ++result;\n  });\n  return result;\n}\n/**\n * Finds children that are typically specified as `props.children`,\n * but only iterates over children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @returns {array} of children that meet the func return statement\n */\n\n\nfunction filter(children, func, context) {\n  var index = 0;\n  var result = [];\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result.push(child);\n    }\n  });\n  return result;\n}\n\nfunction find(children, func, context) {\n  var index = 0;\n  var result = void 0;\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result = child;\n    }\n  });\n  return result;\n}\n\nfunction every(children, func, context) {\n  var index = 0;\n  var result = true;\n  React.Children.forEach(children, function (child) {\n    if (!result) {\n      return;\n    }\n\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (!func.call(context, child, index++)) {\n      result = false;\n    }\n  });\n  return result;\n}\n\nfunction some(children, func, context) {\n  var index = 0;\n  var result = false;\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result = true;\n    }\n  });\n  return result;\n}\n\nfunction toArray(children) {\n  var result = [];\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    result.push(child);\n  });\n  return result;\n}\n\nexport default {\n  map: map,\n  forEach: forEach,\n  count: count,\n  find: find,\n  filter: filter,\n  every: every,\n  some: some,\n  toArray: toArray\n};","map":{"version":3,"names":["React","map","children","func","context","index","Children","child","isValidElement","call","forEach","count","result","filter","push","find","every","some","toArray"],"sources":["/Users/rlborgen/git/ionconfig/editor/node_modules/react-bootstrap/es/utils/ValidComponentChildren.js"],"sourcesContent":["// TODO: This module should be ElementChildren, and should use named exports.\n\nimport React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid components\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @return {object} Object containing the ordered map of results.\n */\nfunction map(children, func, context) {\n  var index = 0;\n\n  return React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    return func.call(context, child, index++);\n  });\n}\n\n/**\n * Iterates through children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for context.\n */\nfunction forEach(children, func, context) {\n  var index = 0;\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    func.call(context, child, index++);\n  });\n}\n\n/**\n * Count the number of \"valid components\" in the Children container.\n *\n * @param {?*} children Children tree container.\n * @returns {number}\n */\nfunction count(children) {\n  var result = 0;\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    ++result;\n  });\n\n  return result;\n}\n\n/**\n * Finds children that are typically specified as `props.children`,\n * but only iterates over children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @returns {array} of children that meet the func return statement\n */\nfunction filter(children, func, context) {\n  var index = 0;\n  var result = [];\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result.push(child);\n    }\n  });\n\n  return result;\n}\n\nfunction find(children, func, context) {\n  var index = 0;\n  var result = void 0;\n\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result = child;\n    }\n  });\n\n  return result;\n}\n\nfunction every(children, func, context) {\n  var index = 0;\n  var result = true;\n\n  React.Children.forEach(children, function (child) {\n    if (!result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (!func.call(context, child, index++)) {\n      result = false;\n    }\n  });\n\n  return result;\n}\n\nfunction some(children, func, context) {\n  var index = 0;\n  var result = false;\n\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result = true;\n    }\n  });\n\n  return result;\n}\n\nfunction toArray(children) {\n  var result = [];\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    result.push(child);\n  });\n\n  return result;\n}\n\nexport default {\n  map: map,\n  forEach: forEach,\n  count: count,\n  find: find,\n  filter: filter,\n  every: every,\n  some: some,\n  toArray: toArray\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}