{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n'use strict';\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\n\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function measureMethods(object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function measure(objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n\n      var wrapper = function wrapper() {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n\n          return measuredFunc.apply(this, arguments);\n        }\n\n        return func.apply(this, arguments);\n      };\n\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n\n    return func;\n  },\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function injectMeasure(measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\n\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;","map":{"version":3,"names":["ReactPerf","enableMeasure","storedMeasure","_noMeasure","measureMethods","object","objectName","methodNames","process","env","NODE_ENV","key","hasOwnProperty","measure","objName","fnName","func","measuredFunc","wrapper","apply","arguments","displayName","injection","injectMeasure","module","exports"],"sources":["/Users/rlborgen/git/ionconfig/editor/node_modules/react-popout/node_modules/react/lib/ReactPerf.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA,IAAIA,SAAS,GAAG;EACd;AACF;AACA;AACA;EACEC,aAAa,EAAE,KALD;;EAOd;AACF;AACA;AACA;EACEC,aAAa,EAAEC,UAXD;;EAad;AACF;AACA;AACA;AACA;EACEC,cAAc,EAAE,wBAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,WAA9B,EAA2C;IACzD,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,KAAK,IAAIC,GAAT,IAAgBJ,WAAhB,EAA6B;QAC3B,IAAI,CAACA,WAAW,CAACK,cAAZ,CAA2BD,GAA3B,CAAL,EAAsC;UACpC;QACD;;QACDN,MAAM,CAACM,GAAD,CAAN,GAAcX,SAAS,CAACa,OAAV,CAAkBP,UAAlB,EAA8BC,WAAW,CAACI,GAAD,CAAzC,EAAgDN,MAAM,CAACM,GAAD,CAAtD,CAAd;MACD;IACF;EACF,CA3Ba;;EA6Bd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,OAAO,EAAE,iBAAUC,OAAV,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiC;IACxC,IAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAIO,YAAY,GAAG,IAAnB;;MACA,IAAIC,OAAO,GAAG,SAAVA,OAAU,GAAY;QACxB,IAAIlB,SAAS,CAACC,aAAd,EAA6B;UAC3B,IAAI,CAACgB,YAAL,EAAmB;YACjBA,YAAY,GAAGjB,SAAS,CAACE,aAAV,CAAwBY,OAAxB,EAAiCC,MAAjC,EAAyCC,IAAzC,CAAf;UACD;;UACD,OAAOC,YAAY,CAACE,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAP;QACD;;QACD,OAAOJ,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;MACD,CARD;;MASAF,OAAO,CAACG,WAAR,GAAsBP,OAAO,GAAG,GAAV,GAAgBC,MAAtC;MACA,OAAOG,OAAP;IACD;;IACD,OAAOF,IAAP;EACD,CArDa;EAuDdM,SAAS,EAAE;IACT;AACJ;AACA;IACIC,aAAa,EAAE,uBAAUV,OAAV,EAAmB;MAChCb,SAAS,CAACE,aAAV,GAA0BW,OAA1B;IACD;EANQ;AAvDG,CAAhB;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASV,UAAT,CAAoBW,OAApB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2C;EACzC,OAAOA,IAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBzB,SAAjB"},"metadata":{},"sourceType":"script"}